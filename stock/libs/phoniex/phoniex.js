// Generated by CoffeeScript 1.4.0
(function() {
  var $, Cache, Env, HeaderLeftAccordionMenuPage, HeaderLeftMenuPage, HeaderSingleLeftMenuPage, MainMenuPageStack, Page, PageStack, Panel, Phoniex, Stack, Util,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  $ = Spine.$;

  Env = (function(_super) {

    __extends(Env, _super);

    function Env() {
      return Env.__super__.constructor.apply(this, arguments);
    }

    Env.env = {};

    Env.inited = false;

    Env.sniff = function() {
      var dav, dua;
      if (this.inited) {
        return this.env;
      }
      dua = navigator.userAgent;
      dav = navigator.appVersion;
      this.env["air"] = dua.indexOf("AdobeAIR") >= 0;
      this.env["khtml"] = dav.indexOf("Konqueror") >= 0 ? parseFloat(dav) : void 0;
      this.env["webkit"] = parseFloat(dua.split("WebKit ")[1]) || void 0;
      this.env["chrome"] = parseFloat(dua.split("Chrome ")[1]) || void 0;
      if (dav.indexOf("Safari") >= 0 && !this.env[chrome]) {
        this.env["safari"] = parseFloat(dav.split("Version/")[1]);
      } else {
        this.env["safari"] = void 0;
      }
      this.env["mac"] = dua.indexOf("Macintosh") >= 0;
      this.env["quirks"] = document.compatMode === "BackCompat";
      this.env["ios"] = /iPhone|iPod|iPad/.test(dua);
      this.env["android"] = parseFloat(dua.split("Android ")[1]) || void 0;
      this.env["mobile"] = this.env.android || this.env.ios ? true : false;
      this.env["connected"] = false;
      this.env["deviceReady"] = false;
      this.env["phonegap"] = false;
      console.log("userAgent=" + dua);
      console.log("appVersion=" + dav);
      if (this.env["android"]) {
        console.log("Android v=" + this.env["android"]);
      }
      return this.env;
    };

    Env.isMobile = function() {
      return this.env.mobile;
    };

    Env.getPhonegap = function() {
      return this.env["phonegap"];
    };

    Env.setPhonegap = function(phonegap) {
      return this.env["phonegap"] = phonegap;
    };

    /*
        1.if phonegap inside, when catch phonegap device ready event, it is true
        2.if not phonegap, it is true after startup
    */


    Env.setDevicesReady = function(detectedDevice) {
      return this.env["deviceReady"] = detectedDevice;
    };

    Env.getDevicesReady = function() {
      return this.env["deviceReady"];
    };

    /*
        1.if phonegap inside, after phonegap device ready event, will detect the connect
          status
        2.if not phonegap, it is true after startup
    */


    Env.setConnected = function(connected) {
      return this.env["connected"] = connected;
    };

    Env.getConnected = function() {
      return this.env["connected"];
    };

    Env.width = function() {
      return $(window).width();
    };

    Env.height = function() {
      return $(window).height();
    };

    Env.detechNetwork = function() {
      var connected, networkState;
      connected = true;
      if (this.getPhonegap && this.getDevicesReady()) {
        networkState = navigator.network.connection.type;
        console.log("connect type " + networkState);
        if (networkState === Connection.UNKNOWN || networkState === Connection.NONE) {
          connected = false;
        }
      }
      return connected;
    };

    Env.startupApp = function(callback) {
      this.sniff();
      if (this.isMobile()) {
        return document.addEventListener('deviceready', function() {
          this.setPhonegap(true);
          this.setDevicesReady(true);
          this.setConnected(this.detechNetwork());
          return callback();
        }, false);
      } else {
        this.setPhonegap(false);
        this.setDevicesReady(true);
        this.setConnected(true);
        return $(function() {
          return callback();
        });
      }
    };

    return Env;

  })(Spine.Module);

  Util = (function() {

    function Util() {}

    Util.toString = Object.prototype.toString;

    Util.isString = function(obj) {
      return this.toString.call(obj) === '[object String]';
    };

    Util.now = function() {
      return (new Date).getTime();
    };

    Util.getNowDateString = function() {
      var now;
      now = new Date();
      return "" + (now.getMonth() + 1) + "-" + (now.getDate()) + "-" + (now.getFullYear());
    };

    Util.getDaysBeforeString = function(days) {
      var date, now;
      now = new Date();
      date = new Date(now.getTime() - days * 1000 * 60 * 60 * 24);
      return "" + (date.getMonth() + 1) + "-" + (date.getDate()) + "-" + (date.getFullYear());
    };

    Util.getDaysBeforeDate = function(days) {
      var now;
      now = new Date();
      return new Date(now.getTime() - days * 1000 * 60 * 60 * 24);
    };

    Util.getCurrentYear = function(days) {
      return new Date().getFullYear();
    };

    Util.getCurrentSeason = function(days) {
      var month;
      month = new Date().getMonth() + 1;
      return Math.floor(month / 4) + 1;
    };

    Util.appendLoadingBar = function(node) {
      if ($("img.loading", node).length <= 0) {
        return node.append("<img src='./images/loading.gif' class='loading'>");
      }
    };

    Util.removeLoadingBar = function(node) {
      return $("img.loading", node).remove();
    };

    /*
        options: 1. type : a. "alert-error"
                 2. body
                 3. timeout
    */


    Util.openAlert = function(node, options) {
      var alert, _ref;
      node.append(window.PhoniexTmpls.alert(options));
      alert = $(".alert", node);
      if (options.type) {
        alert.addClass(options.type);
      }
      alert.show();
      if ((_ref = options.timeout) == null) {
        options.timeout = 1000;
      }
      return setTimeout(function() {
        alert.remove();
        return false;
      }, options.timeout);
    };

    Util.openPromptInfo = function(controller, options) {
      controller.el.append(window.PhoniexTmpls.infoModal(options));
      controller.$("#promptInfoModal").modal();
      return controller.$("#promptInfoModal").modal('show');
    };

    Util.closePromptInfo = function(controller) {
      controller.$("#promptInfoModal").modal('hide');
      return controller.$("#promptInfoModal").remove();
    };

    /*
        @
        {header:"Warning",body:"确定删除?"}
        =>
            record.destroy() for record in list
            @refreshAll()
    */


    Util.openComfirmModal = function(controller, options, callback1, callback2) {
      var _this = this;
      controller.el.append(window.PhoniexTmpls.comfirmModal(options));
      controller.$("#comfirmModal").modal();
      controller.$("#comfirmModal").modal('show');
      controller.$("#comfirmModal button.btn-primary").click(function() {
        if (typeof callback1 === "function") {
          callback1();
        }
        _this.closeComfirmModal(controller);
        return false;
      });
      return controller.$("#comfirmModal button").click(function() {
        if (typeof callback2 === "function") {
          callback2();
        }
        _this.closeComfirmModal(controller);
        return false;
      });
    };

    Util.closeComfirmModal = function(page) {
      page.$("#comfirmModal").modal('hide');
      return page.$("#comfirmModal").remove();
    };

    return Util;

  })();

  Cache = (function() {

    function Cache() {}

    Cache.data = {};

    Cache.get = function(key) {
      var record;
      record = this.data[key];
      if (record) {
        if (record.expire === 0 || record.expire >= Util.now()) {
          return record.value;
        } else {
          delete this.data[key];
        }
      }
      return null;
    };

    Cache.set = function(key, value, expire) {
      var record, timeout;
      if (expire == null) {
        expire = 0;
      }
      timeout = 0;
      if (isNaN(expire) && expire > 0) {
        timeout = expire + Util.now();
      }
      record = {
        value: value,
        expire: timeout
      };
      return this.data[key] = record;
    };

    Cache.clear = function(key) {
      if (key) {
        return delete this.data[key];
      } else {
        return this.data = {};
      }
    };

    return Cache;

  })();

  Stack = (function(_super) {

    __extends(Stack, _super);

    Stack.prototype.controllers = {};

    function Stack(options) {
      var key, value, _ref;
      Stack.__super__.constructor.apply(this, arguments);
      if (typeof this.loadFromTemplate === "function") {
        this.loadFromTemplate();
      }
      if (this.containerSelect) {
        this["container"] = this.$(this.containerSelect);
      } else {
        this["container"] = this;
      }
      this.manager = new Spine.Manager;
      _ref = this.controllers;
      for (key in _ref) {
        value = _ref[key];
        this[key] = new value({
          stack: this
        });
        this.add(this[key]);
      }
      if (this["default"]) {
        this[this["default"]].el.addClass("active");
      }
    }

    Stack.prototype.add = function(child) {
      this.manager.add(child);
      this.container.append(child.el);
      return this.el;
    };

    Stack.prototype.getActive = function() {
      var con, key, value, _ref;
      _ref = this.controllers;
      for (key in _ref) {
        value = _ref[key];
        if (!(this[key].isActive())) {
          continue;
        }
        con = this[key];
        break;
      }
      return con || (con = this[this["default"]]);
    };

    Stack.prototype.activate = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      Stack.__super__.activate.apply(this, arguments);
      return (_ref = this.getActive()) != null ? _ref.active.apply(_ref, args) : void 0;
    };

    Stack.prototype.slientActive = function(current) {
      var cont, _i, _len, _ref, _results;
      _ref = this.manager.controllers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cont = _ref[_i];
        if (cont === current) {
          _results.push(cont.el.addClass('active'));
        } else {
          _results.push(cont.el.removeClass('active'));
        }
      }
      return _results;
    };

    Stack.prototype.refresh = function(callbackOrParams) {
      if (typeof callbackOrParams === 'function') {
        return this.bind('refresh', callbackOrParams);
      } else {
        return this.trigger('refresh', callbackOrParams);
      }
    };

    Stack.prototype.refreshMe = function() {
      var _ref;
      this.refresh();
      return (_ref = this.getActive()) != null ? _ref.refresh() : void 0;
    };

    Stack.prototype.getNextSibling = function() {
      var cont, i, index, _i, _len, _ref;
      index = -1;
      if (this.manager.controllers.length <= 1) {
        return;
      }
      _ref = this.manager.controllers;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        cont = _ref[i];
        if (cont.isActive()) {
          index = i;
        }
      }
      if (index === -1) {
        return;
      }
      if (index >= this.manager.controllers.length - 1) {
        index = 0;
      } else {
        index++;
      }
      return this.manager.controllers[index];
    };

    Stack.prototype.getPrevSibling = function() {
      var cont, i, index, _i, _len, _ref;
      index = -1;
      if (this.manager.controllers.length <= 1) {
        return;
      }
      _ref = this.manager.controllers;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        cont = _ref[i];
        if (cont.isActive()) {
          index = i;
        }
      }
      if (index === -1) {
        return;
      }
      if (index === 0) {
        index = this.manager.controllers.length - 1;
      } else {
        index--;
      }
      return this.manager.controllers[index];
    };

    return Stack;

  })(Spine.Controller);

  Page = (function(_super) {

    __extends(Page, _super);

    function Page() {
      return Page.__super__.constructor.apply(this, arguments);
    }

    Page.prototype.controllers = {};

    Page.prototype.containerSelect = "div[data-role=panels]";

    Page.prototype.loadFromTemplate = function() {
      this.replace(window.PhoniexTmpls.page());
      return this.refreshSkeleton();
    };

    Page.prototype.refreshSkeleton = function() {
      this.footer = this.$("div[data-role=footer]");
      return this.content = this.$("div[data-role=content]");
    };

    Page.prototype.registerPageEvent = function(event, callback) {
      return this.stack.registerPageEvent(event, this, callback);
    };

    Page.prototype.triggerPageEvent = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = this.stack).trigger.apply(_ref, args);
    };

    return Page;

  })(Stack);

  PageStack = (function(_super) {

    __extends(PageStack, _super);

    function PageStack() {
      return PageStack.__super__.constructor.apply(this, arguments);
    }

    PageStack.prototype.containerSelect = "div[data-role=pagestack]";

    PageStack.prototype.loadFromTemplate = function() {
      this.append(window.PhoniexTmpls.pagestack());
      return this.refreshSkeleton();
    };

    PageStack.prototype.refreshSkeleton = function() {
      this.pages = this.$("div[data-role=pagestack]");
      return this.header = this.$("div[data-role=header]");
    };

    PageStack.prototype.registerPageEvent = function(event, page, callback) {
      var _this = this;
      return this.bind(event, function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (callback.apply(null, args)) {
          return page.active.apply(page, args);
        }
      });
    };

    return PageStack;

  })(Stack);

  HeaderLeftMenuPage = (function(_super) {

    __extends(HeaderLeftMenuPage, _super);

    function HeaderLeftMenuPage() {
      return HeaderLeftMenuPage.__super__.constructor.apply(this, arguments);
    }

    HeaderLeftMenuPage.prototype.mainMenuItem = null;

    HeaderLeftMenuPage.prototype.loadFromTemplate = function() {
      var _ref;
      HeaderLeftMenuPage.__super__.loadFromTemplate.apply(this, arguments);
      if ((_ref = this.contentTmpl) == null) {
        this.contentTmpl = window.PhoniexTmpls.leftMenuContent();
      }
      this.content.append(this.contentTmpl);
      this.panels = this.$("div[data-role=panels]");
      this.tophalf = this.$("div[data-role=tophalf]");
      this.bottomhalf = this.$("div[data-role=bottomhalf]");
      this.pageMenu = this.$("[data-role=pagemenu]");
      return typeof this.loadPageMenuTemplate === "function" ? this.loadPageMenuTemplate() : void 0;
    };

    HeaderLeftMenuPage.prototype.registerMenuEvent = function(container, stack) {
      var _this = this;
      return $("li a", container).click(function(e) {
        var name;
        name = $(e.target).data("name");
        return stack[name].active();
      });
    };

    return HeaderLeftMenuPage;

  })(Page);

  HeaderLeftAccordionMenuPage = (function(_super) {

    __extends(HeaderLeftAccordionMenuPage, _super);

    /*
        childpage can define pageMenuID and  pageMenuGroups to
        implement a accordion type page menu
        sample:
        pageMenuID:         "stockPageMenuID"
        pageMenuGroups : [
                        {menuGroupID: id,title: title},
                        {menuGroupID1: id,title: title1}]
        then each panel inside the page,need to define a page menu
        item, sample:
        menuItem: {menuGroupID: "stockRealTimeGroupID",name:"historydeal",text:"历史交易数据"}
    */


    function HeaderLeftAccordionMenuPage(options) {
      this.contentTmpl = window.PhoniexTmpls.accordionLeftMenuContent(this.pageMenuID);
      HeaderLeftAccordionMenuPage.__super__.constructor.apply(this, arguments);
      this.registerPageMenuEvent();
    }

    HeaderLeftAccordionMenuPage.prototype.loadPageMenuTemplate = function() {
      var group, tmpl, _i, _len, _ref, _results;
      if (this.pageMenuGroups) {
        _ref = this.pageMenuGroups;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          group = _ref[_i];
          group["pageMenuID"] = this.pageMenuID;
          tmpl = window.PhoniexTmpls.pageMenuGroup(group);
          _results.push(this.pageMenu.append(tmpl));
        }
        return _results;
      }
    };

    HeaderLeftAccordionMenuPage.prototype.appendPageMenu = function(panel) {
      var item, itemTmpl;
      item = panel.menuItem;
      if (item) {
        itemTmpl = window.PhoniexTmpls.menuItem(item);
        return $("#" + item.menuGroupID + " ul", this.pageMenu).append(itemTmpl);
      }
    };

    HeaderLeftAccordionMenuPage.prototype.registerPageMenuEvent = function() {
      return this.registerMenuEvent(this.pageMenu, this);
    };

    HeaderLeftAccordionMenuPage.prototype.add = function(panel) {
      HeaderLeftAccordionMenuPage.__super__.add.call(this, panel);
      return this.appendPageMenu(panel);
    };

    return HeaderLeftAccordionMenuPage;

  })(HeaderLeftMenuPage);

  HeaderSingleLeftMenuPage = (function(_super) {

    __extends(HeaderSingleLeftMenuPage, _super);

    function HeaderSingleLeftMenuPage() {
      return HeaderSingleLeftMenuPage.__super__.constructor.apply(this, arguments);
    }

    HeaderSingleLeftMenuPage.prototype.staticPageMenu = false;

    HeaderSingleLeftMenuPage.prototype.loadPageMenuTemplate = function() {
      if (this.staticPageMenu && this.pageMenuItems) {
        return this.loadPageMenu();
      }
    };

    HeaderSingleLeftMenuPage.prototype.clearPageMenu = function() {
      return this.pageMenu.empty();
    };

    HeaderSingleLeftMenuPage.prototype.loadPageMenu = function() {
      var item, tmpl, _i, _len, _ref, _results;
      _ref = this.pageMenuItems;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        tmpl = window.PhoniexTmpls.menuItem(item);
        _results.push(this.pageMenu.append(tmpl));
      }
      return _results;
    };

    HeaderSingleLeftMenuPage.prototype.activate = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      HeaderSingleLeftMenuPage.__super__.activate.apply(this, arguments);
      if (!this.staticPageMenu) {
        this.clearPageMenu();
        return this.loadPageMenu();
      }
    };

    HeaderSingleLeftMenuPage.prototype.registerPageMenuEvent = function(callback) {
      var _this = this;
      return $("li a", this.pageMenu).click(function(e) {
        return callback(e);
      });
    };

    return HeaderSingleLeftMenuPage;

  })(HeaderLeftMenuPage);

  MainMenuPageStack = (function(_super) {

    __extends(MainMenuPageStack, _super);

    function MainMenuPageStack(options) {
      MainMenuPageStack.__super__.constructor.apply(this, arguments);
      this.loadMainMenu();
    }

    MainMenuPageStack.prototype.loadFromTemplate = function() {
      return MainMenuPageStack.__super__.loadFromTemplate.apply(this, arguments);
    };

    MainMenuPageStack.prototype.refreshSkeleton = function() {
      MainMenuPageStack.__super__.refreshSkeleton.apply(this, arguments);
      return this.mainMenu = this.$("ul[data-role=mainmenu]");
    };

    MainMenuPageStack.prototype.getMainMenu = function() {
      var key, value, _ref, _results;
      _ref = this.controllers;
      _results = [];
      for (key in _ref) {
        value = _ref[key];
        if (this[key].mainMenuItem) {
          _results.push(this[key].mainMenuItem);
        }
      }
      return _results;
    };

    MainMenuPageStack.prototype.registerMenuEvent = function(container, stack) {
      var _this = this;
      return $("li a", container).click(function(e) {
        var name;
        name = $(e.target).data("name");
        return stack[name].active();
      });
    };

    MainMenuPageStack.prototype.loadMainMenu = function() {
      var item, itemTmpl, _i, _len, _ref;
      this.mainMenu.empty();
      _ref = this.getMainMenu();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        itemTmpl = window.PhoniexTmpls.menuItem(item);
        this.mainMenu.append(itemTmpl);
      }
      return this.registerMenuEvent(this.mainMenu, this);
    };

    return MainMenuPageStack;

  })(PageStack);

  Panel = (function(_super) {

    __extends(Panel, _super);

    function Panel() {
      Panel.__super__.constructor.apply(this, arguments);
      this.loadFromTemplate();
    }

    Panel.prototype.loadFromTemplate = function() {
      return this.replace(window.PhoniexTmpls.panel());
    };

    Panel.prototype.refresh = function(callbackOrParams) {
      if (typeof callbackOrParams === 'function') {
        return this.bind('refresh', callbackOrParams);
      } else {
        return this.trigger('refresh', callbackOrParams);
      }
    };

    Panel.prototype.activate = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return Panel.__super__.activate.apply(this, arguments);
    };

    Panel.prototype.isActive = function() {
      if (this.stack.isActive() === false) {
        return false;
      }
      return Panel.__super__.isActive.apply(this, arguments);
    };

    return Panel;

  })(Spine.Controller);

  Phoniex = this.Phoniex = {};

  Phoniex.Env = Env;

  Phoniex.Util = Util;

  Phoniex.Cache = Cache;

  Phoniex.Page = Page;

  Phoniex.Panel = Panel;

  Phoniex.PageStack = PageStack;

  Phoniex.MainMenuPageStack = MainMenuPageStack;

  Phoniex.HeaderLeftMenuPage = HeaderLeftMenuPage;

  Phoniex.HeaderSingleLeftMenuPage = HeaderSingleLeftMenuPage;

  Phoniex.HeaderLeftAccordionMenuPage = HeaderLeftAccordionMenuPage;

  Phoniex.version = '0.0.1';

  this.App = {};

}).call(this);
