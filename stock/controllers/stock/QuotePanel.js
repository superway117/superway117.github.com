// Generated by CoffeeScript 1.4.0
(function() {
  var $, QuotePanel,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  $ = Spine.$;

  QuotePanel = (function(_super) {

    __extends(QuotePanel, _super);

    QuotePanel.prototype.menuItem = {
      menuGroupID: "stockRealTimeGroupID",
      name: "quote",
      text: "行情页"
    };

    QuotePanel.prototype.events = {
      'click div.btn-group button[type=button]': 'deTapButton',
      'change div.form-inline select': 'deSelectIndicator',
      'submit form.form-inline': 'deCompare',
      "change form.form-inline input[type=checkbox]": "deAddCompare"
    };

    QuotePanel.prototype.elements = {
      "#stockTodayChart": "chart",
      "#stockRealTradeTable": "tradeData",
      "form.form-inline input[type=text]": 'compareText'
    };

    QuotePanel.prototype.chartConfig = {
      "range": "1d",
      "indicator": ""
    };

    QuotePanel.prototype.chartTimer = null;

    QuotePanel.prototype.chartTimeOut = 60000 * 5;

    QuotePanel.prototype.tradeTimer = null;

    QuotePanel.prototype.tradeTimeOut = 10000;

    function QuotePanel() {
      this.fetchLastFinished = __bind(this.fetchLastFinished, this);

      this.deAddCompare = __bind(this.deAddCompare, this);

      this.compareUpdater = __bind(this.compareUpdater, this);

      this.compareTypeAhead = __bind(this.compareTypeAhead, this);
      QuotePanel.__super__.constructor.apply(this, arguments);
      this.ystock = new App.YahooStock();
      this.ystock.bind("fetchLastFinished", this.fetchLastFinished);
      this.compareText.typeahead({
        source: this.compareTypeAhead,
        matcher: function() {
          return true;
        },
        updater: this.compareUpdater
      });
    }

    QuotePanel.prototype.loadFromTemplate = function() {
      QuotePanel.__super__.loadFromTemplate.apply(this, arguments);
      return this.append(window.Tmpls.stockQuote());
    };

    QuotePanel.prototype.activate = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      QuotePanel.__super__.activate.apply(this, arguments);
      this.bind("refresh", this.render);
      this.refreshButtonState();
      this.startChartTimer();
      return this.startTradeTimer();
    };

    QuotePanel.prototype.deactivate = function() {
      QuotePanel.__super__.deactivate.apply(this, arguments);
      this.clearTradeTimer();
      return this.clearChartTimer();
    };

    QuotePanel.prototype.setCompareText = function(list) {
      var listStr;
      listStr = list.join(",");
      return this.compareText.val(listStr);
    };

    QuotePanel.prototype.clearCompareText = function() {
      return this.compareText.val("");
    };

    QuotePanel.prototype.compareTypeAhead = function(val, func) {
      var arr, cur, item, list, _i, _len, _results;
      arr = val.split(",");
      cur = arr[arr.length - 1];
      list = App.StockDict.query(cur);
      _results = [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        item = list[_i];
        _results.push(item.join(","));
      }
      return _results;
    };

    QuotePanel.prototype.compareUpdater = function(item) {
      var arr, newItem;
      arr = this.getCompareArray();
      arr.pop();
      newItem = item.slice(0, 6);
      if (arr.indexOf(newItem) < 0) {
        arr.push(newItem);
      }
      return this.compareArry2Str(arr);
    };

    QuotePanel.prototype.compareArry2Str = function(arr) {
      var str;
      if (arr.length > 0) {
        str = arr.join(",");
        return "" + str + ",";
      } else {
        return "";
      }
    };

    QuotePanel.prototype.getCompareArray = function() {
      var arr, val;
      val = $.trim(this.compareText.val());
      if (val === "" || val === ",") {
        arr = [];
      } else {
        arr = this.compareText.val().split(",");
        if (val[val.length - 1] === ",") {
          arr.pop();
        }
      }
      return arr;
    };

    QuotePanel.prototype.removeCompareStock = function(stock, arr) {
      var index;
      index = arr.indexOf(stock);
      if (index >= 0) {
        arr.splice(index, 1);
      }
      return arr;
    };

    QuotePanel.prototype.addCompareStock = function(stock, arr) {
      if (arr.indexOf(stock) < 0) {
        arr.push(stock);
      }
      return arr;
    };

    QuotePanel.prototype.deAddCompare = function(e) {
      var arr, node, value;
      node = $(e.target);
      value = node.val();
      arr = this.getCompareArray();
      if (node.is(':checked')) {
        arr = this.addCompareStock(value, arr);
      } else {
        arr = this.removeCompareStock(value, arr);
      }
      return this.compareText.val(this.compareArry2Str(arr));
    };

    QuotePanel.prototype.deClearCompare = function(e) {
      return $(e.target).val("");
    };

    QuotePanel.prototype.deCompare = function(e) {
      var arr, index, stock, _i, _len;
      e.preventDefault();
      arr = this.getCompareArray();
      for (index = _i = 0, _len = arr.length; _i < _len; index = ++_i) {
        stock = arr[index];
        if (!App.Util.isValidStockID(stock)) {
          arr.splice(index, 1);
        }
      }
      this.compareText.val(this.compareArry2Str(arr));
      return this.startChartTimer();
    };

    QuotePanel.prototype.refreshButtonState = function() {
      return this.$("button[data-command=range][data-value=" + this.chartConfig.range + "]").button('toggle');
    };

    QuotePanel.prototype.startTradeTimer = function() {
      if (this.isActive()) {
        if (!this.tradeTimer) {
          console.log("QuotePanel startTradeTimer");
          this.tradeTimer = this.delay(this.tradeTimerCB, this.tradeTimeOut);
          return this.renderTrade();
        }
      }
    };

    QuotePanel.prototype.tradeTimerCB = function() {
      if (this.isActive()) {
        console.log("QuotePanel tradeTimerCB");
        this.tradeTimer = this.delay(this.tradeTimerCB, this.tradeTimeOut);
        return this.renderTrade();
      }
    };

    QuotePanel.prototype.clearTradeTimer = function() {
      if (this.tradeTimer) {
        clearTimeout(this.tradeTimer);
      }
      return this.tradeTimer = null;
    };

    QuotePanel.prototype.startChartTimer = function() {
      if (this.isActive()) {
        if (!this.chartTimer) {
          console.log("QuotePanel startChartTimer");
          this.chartTimer = this.delay(this.chartTimerCB, this.chartTimeOut);
          return this.renderChart();
        }
      }
    };

    QuotePanel.prototype.chartTimerCB = function() {
      if (this.isActive()) {
        console.log("QuotePanel chartTimerCB");
        this.chartTimer = this.delay(this.chartTimerCB, this.chartTimeOut);
        return this.renderChart();
      }
    };

    QuotePanel.prototype.clearChartTimer = function() {
      if (this.chartTimer) {
        clearTimeout(this.chartTimer);
      }
      return this.chartTimer = null;
    };

    QuotePanel.prototype.renderChart = function() {
      var arr, options;
      options = {};
      $.extend(options, this.chartConfig);
      arr = this.getCompareArray();
      if (arr.length > 0) {
        options["compare"] = arr;
      }
      return this.chart.attr("src", App.YahooStock.fetchTechChart(this.stack.stockID, options));
    };

    QuotePanel.prototype.renderTrade = function() {
      return this.ystock.fetchLast(this.stack.stockID);
    };

    QuotePanel.prototype.fetchLastFinished = function(result) {
      if (result.status !== "succ") {
        return;
      }
      this.tradeData.empty();
      return this.tradeData.append(window.Tmpls.stockQuoteTradeItem(result.list[0]));
    };

    QuotePanel.prototype.deTapButton = function(e) {
      var node;
      e.preventDefault();
      node = $(e.target);
      this.chartConfig.range = node.data("value");
      return this.startChartTimer();
    };

    QuotePanel.prototype.deSelectIndicator = function(e) {
      e.preventDefault();
      this.chartConfig.indicator = $(e.target).val();
      return this.startChartTimer();
    };

    QuotePanel.prototype.render = function() {
      this.renderChart();
      return this.renderTrade();
    };

    return QuotePanel;

  })(Phoniex.Panel);

  App["QuotePanel"] = QuotePanel;

}).call(this);
