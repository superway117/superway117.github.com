// Generated by CoffeeScript 1.4.0
(function() {
  var $, SelectionPage,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  $ = Spine.$;

  SelectionPage = (function(_super) {

    __extends(SelectionPage, _super);

    SelectionPage.prototype.mainMenuItem = {
      name: "selection",
      text: "自选股"
    };

    SelectionPage.prototype.pageMenuItems = null;

    SelectionPage.prototype.curTag = null;

    SelectionPage.prototype.fetchTag = null;

    SelectionPage.prototype.baseTabID = "baseTab";

    SelectionPage.prototype.baseRefreshTimer = null;

    SelectionPage.prototype.cacheBaseKey = "select-base";

    SelectionPage.prototype.cacheBaseExpiredTime = 60000;

    SelectionPage.prototype.priceTabID = "priceTab";

    SelectionPage.prototype.cachePriceKey = "select-price";

    SelectionPage.prototype.cachePriceExpiredTime = 0;

    SelectionPage.prototype.events = {
      "shown a[data-toggle='tab']": "deSwitchTab",
      "click div.tab-content tbody td:nth-child(2)": "deGotoStockPage",
      "change #baseTab thead input[type=checkbox]": "deCheckAllBase",
      "change #priceTab thead input[type=checkbox]": "deCheckAllPrice",
      "click #deleteBtn": "deDelete",
      "click #compareBtn": "deCompare"
    };

    SelectionPage.prototype.elements = {
      'ui.nav-tabs': 'tabs',
      '#tagLabel': 'tagLabel',
      '#baseTab tbody': 'baseTable',
      '#priceTab tbody': 'priceTable',
      '#baseTab thead tr input[type=checkbox]': 'baseAllCheckboxs',
      '#baseTab tbody tr input[type=checkbox]': 'baseCheckboxs',
      '#priceTab thead tr input[type=checkbox]': 'priceAllCheckboxs',
      '#priceTab tbody tr input[type=checkbox]': 'priceCheckboxs',
      '#deleteBtn': 'deleteBtn',
      '#compareBtn': 'compareBtn'
    };

    SelectionPage.prototype.tabList = {
      "baseTab": {
        "checkData": "isBaseCacheValid",
        "preRender": "basePreRender",
        "fetch": "baseFetch",
        "render": "baseRender",
        "autoFresh": "startBaseRefreshTimer"
      },
      "priceTab": {
        "checkData": "isPriceCacheValid",
        "preRender": "pricePreRender",
        "fetch": "priceFetch",
        "render": "priceRender"
      }
    };

    function SelectionPage() {
      this.deGotoStockPage = __bind(this.deGotoStockPage, this);

      this.fetchData = __bind(this.fetchData, this);

      this.fetchQuotesFinished = __bind(this.fetchQuotesFinished, this);

      this.fetchLastFinished = __bind(this.fetchLastFinished, this);

      this.deChangeTag = __bind(this.deChangeTag, this);
      SelectionPage.__super__.constructor.apply(this, arguments);
      this.initTagList();
      this.tophalf.html(window.Tmpls.selectionPanel());
      this.setCurTag();
      this.bind("refresh", this.fetchData);
      this["ystock"] = new App.YahooStock;
      this.ystock.bind('fetchLastFinished', this.fetchLastFinished);
      this.ystock.bind('fetchQuotesFinished', this.fetchQuotesFinished);
      this.refreshElements();
    }

    SelectionPage.prototype.setCurTag = function(tag) {
      var records;
      if (!tag) {
        records = App.TagList.all();
        if (records.length > 0) {
          tag = records[0].name;
        }
      }
      if (tag && this.curTag !== tag) {
        this.curTag = tag;
        this.tagLabel.text(this.curTag);
        return true;
      } else {
        return false;
      }
    };

    SelectionPage.prototype.getCurTag = function() {
      if (!this.curTag) {
        this.setCurTag();
      }
      return this.curTag;
    };

    SelectionPage.prototype.deChangeTag = function(e) {
      var name;
      name = $(e.target).data("name");
      if (this.setCurTag(name)) {
        this.clearAllCache();
        this.resetCheckbox();
        return this.refresh();
      }
    };

    SelectionPage.prototype.resetTagList = function() {
      this.clearPageMenu();
      this.preparePageMenu();
      return this.loadPageMenu();
    };

    SelectionPage.prototype.loadPageMenu = function() {
      SelectionPage.__super__.loadPageMenu.apply(this, arguments);
      return this.registerPageMenuEvent(this.deChangeTag);
    };

    SelectionPage.prototype.activate = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.preparePageMenu();
      SelectionPage.__super__.activate.apply(this, arguments);
      this.clearAllCache();
      return this.refresh();
    };

    SelectionPage.prototype.deactivate = function() {
      SelectionPage.__super__.deactivate.apply(this, arguments);
      return this.clearAllTimer();
    };

    SelectionPage.prototype.preparePageMenu = function() {
      var record, records, _i, _len, _results;
      records = App.TagList.all();
      this.pageMenuItems = [];
      _results = [];
      for (_i = 0, _len = records.length; _i < _len; _i++) {
        record = records[_i];
        _results.push(this.pageMenuItems.push({
          name: record.name,
          text: record.name
        }));
      }
      return _results;
    };

    SelectionPage.prototype.initTagList = function() {
      App.TagList.fetch();
      if (App.TagList.count() === 0) {
        App.TagList.create(App.TagList["default"]);
      }
      return App.StockList.fetch();
    };

    SelectionPage.prototype.isBaseCacheValid = function() {
      if (Phoniex.Cache.get(this.cacheBaseKey) != null) {
        return true;
      }
      return false;
    };

    SelectionPage.prototype.isPriceCacheValid = function() {
      if (Phoniex.Cache.get(this.cachePriceKey) != null) {
        return true;
      }
      return false;
    };

    SelectionPage.prototype.getBaseCache = function() {
      return Phoniex.Cache.get(this.cacheBaseKey);
    };

    SelectionPage.prototype.getPriceCache = function() {
      return Phoniex.Cache.get(this.cachePriceKey);
    };

    SelectionPage.prototype.setBaseCache = function(data) {
      var item, _i, _len;
      if (!data) {
        return;
      }
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        item = data[_i];
        item["color"] = item.price < item.preclose ? "#468847" : "#FF0000";
        item["growth"] = ((item.price - item.preclose) * 100 / item.preclose).toFixed(2);
      }
      return Phoniex.Cache.set(this.cacheBaseKey, data, this.cacheBaseExpiredTime);
    };

    SelectionPage.prototype.setPriceCache = function(data) {
      return Phoniex.Cache.set(this.cachePriceKey, data);
    };

    SelectionPage.prototype.clearBaseCache = function() {
      return Phoniex.Cache.clear(this.cacheBaseKey);
    };

    SelectionPage.prototype.clearPriceCache = function() {
      return Phoniex.Cache.clear(this.cachePriceKey);
    };

    SelectionPage.prototype.clearAllCache = function() {
      this.clearBaseCache();
      return this.clearPriceCache();
    };

    SelectionPage.prototype.getActiveTab = function(e) {
      return this.$("li.active", this.tabs).attr("data-value");
    };

    SelectionPage.prototype.resetCheckbox = function() {
      this.baseAllCheckboxs.attr("checked", false);
      this.baseCheckboxs.attr("checked", false);
      this.priceAllCheckboxs.attr("checked", false);
      return this.priceCheckboxs.attr("checked", false);
    };

    SelectionPage.prototype.deSwitchTab = function(e) {
      this.clearAllTimer();
      return this.refresh();
    };

    SelectionPage.prototype.fetchLastFinished = function(result) {
      var data;
      if (result.status === "succ" && this.fetchTag === this.curTag) {
        data = result.list;
        this.setBaseCache(data);
        return this.baseRender(data);
      }
    };

    SelectionPage.prototype.fetchQuotesFinished = function(result) {
      var data;
      if (result.status === "succ" && this.fetchTag === this.curTag) {
        data = result.list;
        this.setPriceCache(data);
        return this.priceRender(data);
      }
    };

    SelectionPage.prototype.startBaseRefreshTimer = function() {
      if (this.isActive() && this.getActiveTab() === this.baseTabID) {
        if (!this.baseRefreshTimer) {
          console.log("SeletionPage startBaseRefreshTimer");
          return this.baseRefreshTimer = this.delay(this.baseRefreshTimerCB, this.cacheBaseExpiredTime);
        }
      }
    };

    SelectionPage.prototype.baseRefreshTimerCB = function() {
      if (this.isActive() && this.getActiveTab() === this.baseTabID) {
        console.log("SeletionPage baseRefreshTimerCB");
        this.baseRefreshTimer = this.delay(this.baseRefreshTimerCB, this.cacheBaseExpiredTime);
        return this.refresh();
      }
    };

    SelectionPage.prototype.clearBaseRefreshTimer = function() {
      if (this.baseRefreshTimer) {
        clearTimeout(this.baseRefreshTimer);
      }
      return this.baseRefreshTimer = null;
    };

    SelectionPage.prototype.clearAllTimer = function() {
      return this.clearBaseRefreshTimer();
    };

    SelectionPage.prototype.baseFetch = function(fetchlist) {
      return this.ystock.fetchLast(fetchlist);
    };

    SelectionPage.prototype.priceFetch = function(fetchlist) {
      return this.ystock.fetchQuotes(fetchlist);
    };

    SelectionPage.prototype.baseRender = function(data) {
      var result;
      if (data == null) {
        data = this.getBaseCache();
      }
      result = {};
      result["list"] = data;
      this.baseTable.html(window.Tmpls.selectionBaseTable(result));
      return this.refreshElements();
    };

    SelectionPage.prototype.priceRender = function(data) {
      var result;
      if (data == null) {
        data = this.getPriceCache();
      }
      result = {};
      result["list"] = data;
      this.priceTable.html(window.Tmpls.selectionPriceTable(result));
      return this.refreshElements();
    };

    SelectionPage.prototype.basePreRender = function(stockList) {
      var data, record;
      data = {};
      data["list"] = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = stockList.length; _i < _len; _i++) {
          record = stockList[_i];
          _results.push({
            "id": record,
            name: App.StockDict.list[record][1]
          });
        }
        return _results;
      })();
      this.baseTable.html(window.Tmpls.selectionBasePreTable(data));
      return this.refreshElements();
    };

    SelectionPage.prototype.pricePreRender = function(stockList) {
      var data, record;
      data = {};
      data["list"] = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = stockList.length; _i < _len; _i++) {
          record = stockList[_i];
          _results.push({
            "id": record,
            name: App.StockDict.list[record][1]
          });
        }
        return _results;
      })();
      this.priceTable.html(window.Tmpls.selectionPricePreTable(data));
      return this.refreshElements();
    };

    SelectionPage.prototype.renderEmptyList = function() {
      this.baseTable.html("");
      this.priceTable.html("");
      this.resetCompareBtn([]);
      this.resetDeleteBtn([]);
      return this.refreshElements();
    };

    SelectionPage.prototype.refreshAll = function(options) {
      if (options != null ? options.resetCurTag : void 0) {
        this.setCurTag(App.TagList.first().name);
      }
      if (options != null ? options.resetTagList : void 0) {
        this.resetTagList();
      }
      this.resetCheckbox();
      return this.refresh();
    };

    SelectionPage.prototype.resetCompareBtn = function(list) {
      var _this = this;
      if (list == null) {
        list = App.StockList.select(function(record) {
          return record.tag === _this.curTag;
        });
      }
      if (list.length > 1) {
        return this.compareBtn.removeAttr("disabled");
      } else {
        return this.compareBtn.attr("disabled", "disabled");
      }
    };

    SelectionPage.prototype.resetDeleteBtn = function(list) {
      var _this = this;
      if (list == null) {
        list = App.StockList.select(function(record) {
          return record.tag === _this.curTag;
        });
      }
      if (list.length > 0) {
        return this.deleteBtn.text("删除");
      } else {
        if (this.curTag === App.TagList["default"].name) {
          this.deleteBtn.attr("disabled", "disabled");
        } else {
          this.deleteBtn.removeAttr("disabled");
        }
        return this.deleteBtn.text("删除标签");
      }
    };

    SelectionPage.prototype.fetchData = function() {
      var autoFresh, fetchFunc, fetchlist, funcList, list, preRenderFunc, record, renderFunc,
        _this = this;
      if (!this.curTag) {
        return;
      }
      list = App.StockList.select(function(record) {
        return record.tag === _this.curTag;
      });
      if (list.length === 0) {
        return this.renderEmptyList();
      } else {
        this.resetCompareBtn(list);
        this.resetDeleteBtn(list);
        funcList = this.tabList[this.getActiveTab()];
        if (this[funcList.checkData].call(this)) {
          renderFunc = this[funcList.render];
          if (renderFunc != null) {
            renderFunc.call(this);
          }
        } else {
          fetchlist = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = list.length; _i < _len; _i++) {
              record = list[_i];
              _results.push(record.stock);
            }
            return _results;
          })();
          preRenderFunc = this[funcList.preRender];
          if (preRenderFunc != null) {
            preRenderFunc.call(this, fetchlist);
          }
          fetchFunc = this[funcList.fetch];
          if (fetchFunc != null) {
            fetchFunc.call(this, fetchlist);
          }
          this.fetchTag = this.curTag;
        }
        autoFresh = this[funcList.autoFresh];
        return autoFresh != null ? autoFresh.call(this) : void 0;
      }
    };

    SelectionPage.prototype.deGotoStockPage = function(e) {
      var node, stockID;
      node = $(e.target);
      if (node.is("a")) {
        node = node.parent();
      }
      stockID = node.attr("data-value");
      this.triggerPageEvent("query", stockID);
      return false;
    };

    SelectionPage.prototype.deCheckAllBase = function(e) {
      var node;
      node = $(e.target);
      this.baseCheckboxs.attr("checked", node.is(':checked'));
      return false;
    };

    SelectionPage.prototype.deCheckAllPrice = function(e) {
      var node;
      node = $(e.target);
      this.priceCheckboxs.attr("checked", node.is(':checked'));
      return false;
    };

    SelectionPage.prototype.deDelete = function(e) {
      var checkbox, list, tag,
        _this = this;
      e.preventDefault();
      if (this.getActiveTab() === this.baseTabID) {
        checkbox = this.baseCheckboxs;
      } else {
        checkbox = this.priceCheckboxs;
      }
      list = [];
      checkbox.each(function(index, target) {
        var me, records, value;
        me = $(target);
        if (me.is(':checked')) {
          value = me.parent().next().attr("data-value");
          records = App.StockList.select(function(item) {
            return item["stock"] === value && item["tag"] === _this.curTag;
          });
          if (records.length > 0) {
            return list.push(records[0]);
          }
        }
      });
      if (list.length > 0) {
        Phoniex.Util.openComfirmModal(this, {
          header: "Warning",
          body: "确定删除?"
        }, function() {
          var record, _i, _len;
          for (_i = 0, _len = list.length; _i < _len; _i++) {
            record = list[_i];
            record.destroy();
          }
          return _this.refreshAll();
        });
      } else {
        list = App.StockList.select(function(record) {
          return record.tag === _this.curTag;
        });
        if (list.length === 0 && this.stockLabel !== App.TagList["default"].name) {
          tag = App.TagList.findByAttribute("name", this.curTag);
          if (tag) {
            tag.destroy();
          }
          this.refreshAll({
            "resetCurTag": true,
            "resetTagList": true
          });
        }
      }
      return false;
    };

    SelectionPage.prototype.deCompare = function(e) {
      var checkbox, list,
        _this = this;
      e.preventDefault();
      if (this.getActiveTab() === this.baseTabID) {
        checkbox = this.baseCheckboxs;
      } else {
        checkbox = this.priceCheckboxs;
      }
      list = [];
      checkbox.each(function(index, target) {
        var me, value;
        me = $(target);
        if (me.is(':checked')) {
          value = me.parent().next().attr("data-value");
          return list.push(value);
        }
      });
      if (list.length > 1) {
        this.triggerPageEvent("compare", list);
      }
      this.resetCheckbox();
      return false;
    };

    return SelectionPage;

  })(Phoniex.HeaderSingleLeftMenuPage);

  App["SelectionPage"] = SelectionPage;

}).call(this);
