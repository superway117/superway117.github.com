// Generated by CoffeeScript 1.4.0
(function() {
  var $, IndexPage,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  $ = Spine.$;

  IndexPage = (function(_super) {

    __extends(IndexPage, _super);

    IndexPage.prototype.mainMenuItem = {
      name: "index",
      text: "大盘一览"
    };

    IndexPage.prototype.staticPageMenu = true;

    IndexPage.prototype.pageMenuItems = [
      {
        name: "000001.SS",
        yahoo: "000001.SS",
        text: "上证指数"
      }, {
        name: "399001.SZ",
        yahoo: "399001.SZ",
        text: "深证成指"
      }, {
        name: "INDEXHANGSENG:HSI",
        yahoo: "^HSI",
        text: "恒生指数"
      }, {
        name: "INDEXDJX:.DJI",
        yahoo: "^DJI",
        text: "道琼斯指数"
      }, {
        name: "INDEXNASDAQ:.IXIC",
        yahoo: "^IXIC",
        text: "纳斯达克"
      }, {
        name: "INDEXDB:DAX",
        yahoo: "^GDAXI",
        text: "德国DAX指数"
      }, {
        name: "INDEXFTSE:UKX",
        yahoo: "^FTSE",
        text: "伦敦富时100指数"
      }
    ];

    IndexPage.prototype.curIndex = null;

    IndexPage.prototype.defaultIndex = "000001.SS";

    IndexPage.prototype.quoteCacheExpiredTime = 60000;

    IndexPage.prototype.quoteTimer = null;

    IndexPage.prototype.chartTimer = null;

    IndexPage.prototype.chartCacheExpiredTime = 60000 * 5;

    IndexPage.prototype.chartConfig = {
      "range": "1d",
      "indicator": ""
    };

    IndexPage.prototype.elements = {
      "#indexChart": "chart"
    };

    IndexPage.prototype.events = {
      'click div.btn-group button[type=button]': 'deTapButton',
      'change div.form-inline select': 'deSelectIndicator'
    };

    function IndexPage() {
      this.fetchFinished = __bind(this.fetchFinished, this);

      this.fetchData = __bind(this.fetchData, this);

      this.deChangeIndex = __bind(this.deChangeIndex, this);
      IndexPage.__super__.constructor.apply(this, arguments);
      this.gstock = new App.GoogStock;
      this.gstock.bind('fetchFinished', this.fetchFinished);
      this.bind("refresh", this.fetchData);
      this.setCurIndex();
    }

    IndexPage.prototype.loadFromTemplate = function() {
      IndexPage.__super__.loadFromTemplate.apply(this, arguments);
      this.bottomhalf.html(window.Tmpls.indexBottomHalf());
      return this.refreshElements();
    };

    IndexPage.prototype.loadPageMenu = function() {
      IndexPage.__super__.loadPageMenu.apply(this, arguments);
      return this.registerPageMenuEvent(this.deChangeIndex);
    };

    IndexPage.prototype.deChangeIndex = function(e) {
      var name;
      name = $(e.target).data("name");
      if (this.setCurIndex(name)) {
        this.clearCurIndexCache();
        this.startQuoteTimer();
        return this.startChartTimer();
      }
    };

    IndexPage.prototype.getCurText = function() {
      var item, _i, _len, _ref;
      if (!this.curIndex) {
        return;
      }
      _ref = this.pageMenuItems;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item.name === this.curIndex) {
          return item.text;
        }
      }
    };

    IndexPage.prototype.setCurIndex = function(index) {
      if (!index) {
        index = this.defaultIndex;
      }
      if (index && this.curIndex !== index) {
        this.curIndex = index;
        return true;
      } else {
        return false;
      }
    };

    IndexPage.prototype.startChartTimer = function() {
      if (this.isActive()) {
        if (!this.chartTimer) {
          console.log("IndexPage startChartTimer");
          this.chartTimer = this.delay(this.chartTimerCB, this.chartCacheExpiredTime);
        }
        return this.renderChart();
      }
    };

    IndexPage.prototype.chartTimerCB = function() {
      if (this.isActive()) {
        this.chartTimer = this.delay(this.chartTimerCB, this.chartCacheExpiredTime);
        return this.renderChart();
      }
    };

    IndexPage.prototype.clearChartTimer = function() {
      if (this.chartTimer) {
        clearTimeout(this.chartTimer);
      }
      return this.chartTimer = null;
    };

    IndexPage.prototype.getCurYahooStock = function() {
      var item, _i, _len, _ref;
      if (!this.curIndex) {
        return;
      }
      _ref = this.pageMenuItems;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item.name === this.curIndex) {
          return item.yahoo;
        }
      }
    };

    IndexPage.prototype.renderChart = function() {
      return this.chart.attr("src", App.YahooStock.fetchTechChart(this.getCurYahooStock(), this.chartConfig));
    };

    IndexPage.prototype.deTapButton = function(e) {
      var node;
      e.preventDefault();
      node = $(e.target);
      this.chartConfig.range = node.data("value");
      return this.startChartTimer();
    };

    IndexPage.prototype.deSelectIndicator = function(e) {
      e.preventDefault();
      this.chartConfig.indicator = $(e.target).val();
      return this.startChartTimer();
    };

    IndexPage.prototype.fetchData = function() {
      var args, data;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (data = Phoniex.Cache.get(this.getCacheKey())) {
        return this.renderQuote();
      } else {
        return this.gstock.fetchStock(this.curIndex);
      }
    };

    IndexPage.prototype.startQuoteTimer = function() {
      if (this.isActive()) {
        if (!this.quoteTimer) {
          console.log("IndexPage startRefreshTimer");
          this.quoteTimer = this.delay(this.quoteTimerCB, this.quoteCacheExpiredTime);
        }
        return this.refresh();
      }
    };

    IndexPage.prototype.quoteTimerCB = function() {
      if (this.isActive()) {
        console.log("IndexPage quoteTimerCB");
        this.quoteTimer = this.delay(this.quoteTimerCB, this.quoteCacheExpiredTime);
        return this.refresh();
      }
    };

    IndexPage.prototype.clearQuoteTimer = function() {
      if (this.quoteTimer) {
        clearTimeout(this.quoteTimer);
      }
      return this.quoteTimer = null;
    };

    IndexPage.prototype.getCacheKey = function(indexName) {
      return indexName + "-quote";
    };

    IndexPage.prototype.getCurCacheKey = function() {
      if (!this.curIndex) {
        return;
      }
      return this.getCacheKey(this.curIndex);
    };

    IndexPage.prototype.clearCurIndexCache = function() {
      return Phoniex.Cache.clear(this.getCurCacheKey());
    };

    IndexPage.prototype.fetchFinished = function(result) {
      var data;
      if (result.status === "succ") {
        data = result.list[0];
        Phoniex.Cache.set(this.getCurCacheKey(), data, this.quoteCacheExpiredTime);
        return this.renderQuote();
      }
    };

    IndexPage.prototype.renderQuote = function(data) {
      if (data == null) {
        data = Phoniex.Cache.get(this.getCurCacheKey());
      }
      if (!data) {
        return;
      }
      data["color"] = data.cp.charAt(0) === "-" ? "#468847" : "#FF0000";
      if (!data.lname) {
        data.lname = this.getCurText();
      }
      return this.tophalf.html(window.Tmpls.indexTopHalf(data));
    };

    IndexPage.prototype.render = function() {
      this.renderChart();
      return this.renderQuote();
    };

    IndexPage.prototype.activate = function() {
      IndexPage.__super__.activate.apply(this, arguments);
      this.startQuoteTimer();
      return this.startChartTimer();
    };

    IndexPage.prototype.deactivate = function() {
      IndexPage.__super__.deactivate.apply(this, arguments);
      this.clearQuoteTimer();
      return this.clearChartTimer();
    };

    return IndexPage;

  })(Phoniex.HeaderSingleLeftMenuPage);

  App["IndexPage"] = IndexPage;

}).call(this);
