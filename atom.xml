<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Eason&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://superway117.github.io/"/>
  <updated>2016-12-19T16:36:49.412Z</updated>
  <id>http://superway117.github.io/</id>
  
  <author>
    <name>Eason Pan</name>
    <email>superway_build@hotmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python PyIntObject</title>
    <link href="http://superway117.github.io/2016/12/20/py_intobject/"/>
    <id>http://superway117.github.io/2016/12/20/py_intobject/</id>
    <published>2016-12-19T16:09:10.000Z</published>
    <updated>2016-12-19T16:36:49.412Z</updated>
    
    <content type="html"><![CDATA[<p><code>PyIntObject</code>属于固定size的object,所以数据结构也比较简单.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">    PyObject_HEAD</div><div class="line">    <span class="keyword">long</span> ob_ival;</div><div class="line">&#125; PyIntObject;</div></pre></td></tr></table></figure>
<p>本文topic主要在<code>PyIntObject</code>如何实现内存/性能优化. 概括的说</p>
<ul>
<li>对于small int, 默认是-5–257之间的PyIntObject,是预分配的, 每次只要从small_ints这个池子里面去就行</li>
<li>预先分配了一个pool(free_list),2.7定义的是(1000-8)个PyIntObject,每次需要分配PyIntObject,直接从free_list取</li>
</ul>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="PyInt-Init"><a href="#PyInt-Init" class="headerlink" title="_PyInt_Init"></a>_PyInt_Init</h3><p>Python解释器执行的时候会做一个动作.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Py_InitializeEx</div><div class="line">  --&gt;_PyInt_Init</div></pre></td></tr></table></figure>
<p>所有的逻辑看<code>_PyInt_Init</code>就清楚了.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span></div><div class="line">_PyInt_Init(<span class="keyword">void</span>)</div><div class="line">&#123;</div><div class="line">    PyIntObject *v;</div><div class="line">    <span class="keyword">int</span> ival;</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> NSMALLNEGINTS + NSMALLPOSINTS &gt; 0</span></div><div class="line">    <span class="keyword">for</span> (ival = -NSMALLNEGINTS; ival &lt; NSMALLPOSINTS; ival++) &#123;</div><div class="line">          <span class="keyword">if</span> (!free_list &amp;&amp; (free_list = fill_free_list()) == <span class="literal">NULL</span>)</div><div class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="comment">/* PyObject_New is inlined */</span></div><div class="line">        v = free_list;</div><div class="line">        free_list = (PyIntObject *)Py_TYPE(v);</div><div class="line">        PyObject_INIT(v, &amp;PyInt_Type);</div><div class="line">        v-&gt;ob_ival = ival;</div><div class="line">        small_ints[ival + NSMALLNEGINTS] = v;</div><div class="line">    &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的逻辑:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(ival=<span class="number">-5</span>; ival&lt;<span class="number">257</span>; ival++)</div><div class="line">&#123;</div><div class="line">  <span class="number">1.</span> 从free_list里面去一个空闲的 PyIntObject --&gt;v</div><div class="line">  <span class="number">2.</span> 给v赋值 ob_ival = ival</div><div class="line">  <span class="number">3.</span> free_list里面ob_type用来指向前一个block,所有这里需要做一个PyObject_INIT</div><div class="line">  <span class="number">4.</span> 因为是从<span class="number">-5</span>开始算起，所有small_ints[<span class="number">0</span>]是给<span class="number">-5</span>用的,以此类推</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>free_list只分配一次<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!free_list &amp;&amp; (free_list = fill_free_list()) == <span class="literal">NULL</span>)</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div></pre></td></tr></table></figure></p>
<h3 id="free-list"><a href="#free-list" class="headerlink" title="free_list"></a>free_list</h3><p>fill_free_list的逻辑就是一次申请 N_INTOBJECTS 个 PyIntObject.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PyMem_MALLOC(<span class="keyword">sizeof</span>(PyIntBlock))</div></pre></td></tr></table></figure>
<p>需要注意的是:</p>
<ul>
<li>fill_free_list返回的是最后一个block: p + N_INTOBJECTS - 1</li>
<li>每一个block的ob_type,用来指向前一个block</li>
<li>第一个block的ob_type是null,这个用来判断当前free_list是否已经用完了</li>
<li>block_list用来维护多个free_list</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> _intblock &#123;</div><div class="line">    <span class="keyword">struct</span> _intblock *next;</div><div class="line">    PyIntObject objects[N_INTOBJECTS];</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> _intblock PyIntBlock;</div><div class="line"></div><div class="line"><span class="keyword">static</span> PyIntBlock *block_list = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">static</span> PyIntObject *free_list = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> PyIntObject *</span></div><div class="line"><span class="title">fill_free_list</span><span class="params">(<span class="keyword">void</span>)</span></div><div class="line">&#123;</div><div class="line">    PyIntObject *p, *q;</div><div class="line">    <span class="comment">/* Python's object allocator isn't appropriate for large blocks. */</span></div><div class="line">    p = (PyIntObject *) PyMem_MALLOC(<span class="keyword">sizeof</span>(PyIntBlock));</div><div class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> (PyIntObject *) PyErr_NoMemory();</div><div class="line">    ((PyIntBlock *)p)-&gt;next = block_list;</div><div class="line">    block_list = (PyIntBlock *)p;</div><div class="line">    <span class="comment">/* Link the int objects together, from rear to front, then return</span></div><div class="line">       the address of the last int object in the block. */</div><div class="line">    p = &amp;((PyIntBlock *)p)-&gt;objects[<span class="number">0</span>];</div><div class="line">    q = p + N_INTOBJECTS;</div><div class="line">    <span class="keyword">while</span> (--q &gt; p)</div><div class="line">        Py_TYPE(q) = (<span class="keyword">struct</span> _typeobject *)(q<span class="number">-1</span>);</div><div class="line">    Py_TYPE(q) = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">return</span> p + N_INTOBJECTS - <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;PyIntObject&lt;/code&gt;属于固定size的object,所以数据结构也比较简单.&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;
    
    </summary>
    
    
      <category term="python" scheme="http://superway117.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python PyStringObject</title>
    <link href="http://superway117.github.io/2016/12/20/py_stringobject/"/>
    <id>http://superway117.github.io/2016/12/20/py_stringobject/</id>
    <published>2016-12-19T16:09:10.000Z</published>
    <updated>2016-12-20T14:53:12.792Z</updated>
    
    <content type="html"><![CDATA[<p><code>PyStringObject</code>属于变长size的object</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">    PyObject_VAR_HEAD</div><div class="line">    <span class="keyword">long</span> ob_shash;</div><div class="line">    <span class="keyword">int</span> ob_sstate;</div><div class="line">    <span class="keyword">char</span> ob_sval[<span class="number">1</span>];</div><div class="line"></div><div class="line">    <span class="comment">/* Invariants:</span></div><div class="line">     *     ob_sval contains space for 'ob_size+1' elements.</div><div class="line">     *     ob_sval[ob_size] == 0.</div><div class="line">     *     ob_shash is the hash of the string or -1 if not computed yet.</div><div class="line">     *     ob_sstate != 0 iff the string object is in stringobject.c's</div><div class="line">     *       'interned' dictionary; in this case the two references</div><div class="line">     *       from 'interned' to this object are *not counted* in ob_refcnt.</div><div class="line">     */</div><div class="line">&#125; PyStringObject;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PyObject_VAR_HEAD               \</span></div><div class="line">    PyObject_HEAD                       \</div><div class="line">    Py_ssize_t ob_size; <span class="comment">/* Number of items in variable part */</span></div></pre></td></tr></table></figure>
<p>ob_size存的是字符串的size,strlen(str),不包含结束符</p>
<h2 id="针对size-0-or-1的字符串内存优化"><a href="#针对size-0-or-1的字符串内存优化" class="headerlink" title="针对size=0 or 1的字符串内存优化"></a>针对size=0 or 1的字符串内存优化</h2><p>看<code>PyString_FromStringAndSize</code>的实现</p>
<ol>
<li>如果size==0, 返回<code>null_strings</code>,引用计数+1</li>
<li>如果size==1，如果characters数组里面已经存在,直接返回,引用计数+1;如果characters数组里面不存在,创建一个，并保存在characters数组</li>
</ol>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="function">PyObject *</span></div><div class="line"><span class="title">PyString_FromStringAndSize</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str, Py_ssize_t size)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">register</span> PyStringObject *op;</div><div class="line">    <span class="keyword">if</span> (size &lt; <span class="number">0</span>) &#123;</div><div class="line">        PyErr_SetString(PyExc_SystemError,</div><div class="line">            <span class="string">"Negative size passed to PyString_FromStringAndSize"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (size == <span class="number">0</span> &amp;&amp; (op = nullstring) != <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> COUNT_ALLOCS</span></div><div class="line">        null_strings++;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">        Py_INCREF(op);</div><div class="line">        <span class="keyword">return</span> (PyObject *)op;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (size == <span class="number">1</span> &amp;&amp; str != <span class="literal">NULL</span> &amp;&amp;</div><div class="line">        (op = characters[*str &amp; UCHAR_MAX]) != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> COUNT_ALLOCS</span></div><div class="line">        one_strings++;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">        Py_INCREF(op);</div><div class="line">        <span class="keyword">return</span> (PyObject *)op;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (size &gt; PY_SSIZE_T_MAX - PyStringObject_SIZE) &#123;</div><div class="line">        PyErr_SetString(PyExc_OverflowError, <span class="string">"string is too large"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* Inline PyObject_NewVar */</span></div><div class="line">    op = (PyStringObject *)PyObject_MALLOC(PyStringObject_SIZE + size);</div><div class="line">    <span class="keyword">if</span> (op == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> PyErr_NoMemory();</div><div class="line">    PyObject_INIT_VAR(op, &amp;PyString_Type, size);</div><div class="line">    op-&gt;ob_shash = <span class="number">-1</span>;</div><div class="line">    op-&gt;ob_sstate = SSTATE_NOT_INTERNED;</div><div class="line">    <span class="keyword">if</span> (str != <span class="literal">NULL</span>)</div><div class="line">        Py_MEMCPY(op-&gt;ob_sval, str, size);</div><div class="line">    op-&gt;ob_sval[size] = <span class="string">'\0'</span>;</div><div class="line">    <span class="comment">/* share short strings */</span></div><div class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</div><div class="line">        PyObject *t = (PyObject *)op;</div><div class="line">        PyString_InternInPlace(&amp;t);</div><div class="line">        op = (PyStringObject *)t;</div><div class="line">        nullstring = op;</div><div class="line">        Py_INCREF(op);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (size == <span class="number">1</span> &amp;&amp; str != <span class="literal">NULL</span>) &#123;</div><div class="line">        PyObject *t = (PyObject *)op;</div><div class="line">        PyString_InternInPlace(&amp;t);</div><div class="line">        op = (PyStringObject *)t;</div><div class="line">        characters[*str &amp; UCHAR_MAX] = op;</div><div class="line">        Py_INCREF(op);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> (PyObject *) op;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;PyStringObject&lt;/code&gt;属于变长size的object&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;d
    
    </summary>
    
    
      <category term="python" scheme="http://superway117.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python Decorator - 理解调用过程</title>
    <link href="http://superway117.github.io/2016/12/15/py_decorator_2/"/>
    <id>http://superway117.github.io/2016/12/15/py_decorator_2/</id>
    <published>2016-12-15T06:54:30.000Z</published>
    <updated>2016-12-16T16:02:11.870Z</updated>
    
    <content type="html"><![CDATA[<p>主要topic</p>
<ul>
<li>Decorator是怎么调用的</li>
<li>用partial来实现一个带参数的Decorator</li>
</ul>
<h2 id="Decorator的调用"><a href="#Decorator的调用" class="headerlink" title="Decorator的调用"></a><code>Decorator</code>的调用</h2><p>理解<code>Decorator</code>的第一步要理解<code>Decorator</code>是怎么调用的.</p>
<p>下面的例子是<code>Decorator</code>不带参数的情况</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@logged()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></div><div class="line">  <span class="keyword">return</span> x+y</div></pre></td></tr></table></figure>
<p>他相当于</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></div><div class="line">  <span class="keyword">return</span> x + y</div><div class="line"></div><div class="line">add = logged(add)</div></pre></td></tr></table></figure>
<p>下面的例子是<code>Decorator</code>带参数的情况<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@logged(level=logging.CRITICAL, name='example')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">()</span>:</span></div><div class="line">  print(<span class="string">'Spam!'</span>)</div></pre></td></tr></table></figure></p>
<p>他相当于</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">()</span>:</span></div><div class="line">  print(<span class="string">'Spam!'</span>)</div><div class="line">spam = logged(level=logging.CRITICAL, name=<span class="string">'example'</span>)(spam)</div></pre></td></tr></table></figure>
<h2 id="用partial实现带参数的Decorator"><a href="#用partial实现带参数的Decorator" class="headerlink" title="用partial实现带参数的Decorator"></a>用<code>partial</code>实现带参数的<code>Decorator</code></h2><p>下面的 <code>logged</code> demo了,怎么样实现兼容一个带或者不带参数的<code>Decorator</code></p>
<p>关键的地方是: 理解如何调用</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps, partial</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">logged</span><span class="params">(func=None, *, level=logging.DEBUG, name=None, message=None)</span>:</span></div><div class="line">  <span class="keyword">if</span> func <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">    <span class="keyword">return</span> partial(logged, level=level, name=name, message=message)</div><div class="line"></div><div class="line">  logname = name <span class="keyword">if</span> name <span class="keyword">else</span> func.__module__</div><div class="line">  log = logging.getLogger(logname)</div><div class="line">  logmsg = message <span class="keyword">if</span> message <span class="keyword">else</span> func.__name__</div><div class="line"></div><div class="line"><span class="meta">  @wraps(func)</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">    log.log(level, logmsg)</div><div class="line">    <span class="keyword">return</span> func(*args, **kwargs)</div><div class="line"></div><div class="line">  <span class="keyword">return</span> wrapper</div></pre></td></tr></table></figure>
<p>Example use</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@logged</div><div class="line">def add(x, y):</div><div class="line">  return x + y</div><div class="line"></div><div class="line">@logged(level=logging.CRITICAL, name=&apos;example&apos;)</div><div class="line">def spam():</div><div class="line">  print(&apos;Spam!&apos;)</div></pre></td></tr></table></figure>
<h3 id="不带参数的情况"><a href="#不带参数的情况" class="headerlink" title="不带参数的情况"></a>不带参数的情况</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@logged</div><div class="line">def add(x, y):</div><div class="line">  return x + y</div></pre></td></tr></table></figure>
<p>等价<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">def add(x, y):</div><div class="line">  return x + y</div><div class="line"></div><div class="line">add = logged(add)</div></pre></td></tr></table></figure></p>
<p>logged里面针对这个情况,返回的是<code>wrapper</code>,注意, 这个<code>wrapper</code>是被<code>@wraps(func)</code>包装过的.</p>
<p>相当于</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">add = logged(add) == wraps(add)(wrapper)</div></pre></td></tr></table></figure>
<p>wraps的实现如下:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">WRAPPER_ASSIGNMENTS = (<span class="string">'__module__'</span>, <span class="string">'__name__'</span>, <span class="string">'__doc__'</span>)</div><div class="line">WRAPPER_UPDATES = (<span class="string">'__dict__'</span>,)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_wrapper</span><span class="params">(wrapper,</span></span></div><div class="line">                   wrapped,</div><div class="line">                   assigned = WRAPPER_ASSIGNMENTS,</div><div class="line">                   updated = WRAPPER_UPDATES):</div><div class="line">    <span class="string">"""Update a wrapper function to look like the wrapped function</span></div><div class="line"></div><div class="line">       wrapper is the function to be updated</div><div class="line">       wrapped is the original function</div><div class="line">       assigned is a tuple naming the attributes assigned directly</div><div class="line">       from the wrapped function to the wrapper function (defaults to</div><div class="line">       functools.WRAPPER_ASSIGNMENTS)</div><div class="line">       updated is a tuple naming the attributes of the wrapper that</div><div class="line">       are updated with the corresponding attribute from the wrapped</div><div class="line">       function (defaults to functools.WRAPPER_UPDATES)</div><div class="line">    """</div><div class="line">    <span class="keyword">for</span> attr <span class="keyword">in</span> assigned:</div><div class="line">        setattr(wrapper, attr, getattr(wrapped, attr))</div><div class="line">    <span class="keyword">for</span> attr <span class="keyword">in</span> updated:</div><div class="line">        getattr(wrapper, attr).update(getattr(wrapped, attr, &#123;&#125;))</div><div class="line">    <span class="comment"># Return the wrapper so this can be used as a decorator via partial()</span></div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">wraps</span><span class="params">(wrapped,</span></span></div><div class="line">          assigned = WRAPPER_ASSIGNMENTS,</div><div class="line">          updated = WRAPPER_UPDATES):</div><div class="line">    <span class="string">"""Decorator factory to apply update_wrapper() to a wrapper function</span></div><div class="line"></div><div class="line">       Returns a decorator that invokes update_wrapper() with the decorated</div><div class="line">       function as the wrapper argument and the arguments to wraps() as the</div><div class="line">       remaining arguments. Default arguments are as for update_wrapper().</div><div class="line">       This is a convenience function to simplify applying partial() to</div><div class="line">       update_wrapper().</div><div class="line">    """</div><div class="line">    <span class="keyword">return</span> partial(update_wrapper, wrapped=wrapped,</div><div class="line">                   assigned=assigned, updated=updated)</div></pre></td></tr></table></figure>
<p>所以<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">add = logged(add) == wraps(add)(wrapper)</div><div class="line">==&gt;</div><div class="line">1. wraps(add) 返回一个 partialobject 实例(pto),他封装的函数是 update_wrapper</div><div class="line">2. wraps(add)(wrapper) 相当于执行 partial_call</div><div class="line">   partial_call</div><div class="line">    --&gt; ret = PyObject_Call(pto-&gt;fn, argappl, kwappl) --&gt; update_wrapper()</div><div class="line">    --&gt; update_wrapper() --&gt; return add</div></pre></td></tr></table></figure></p>
<p>这样绕了一圈 add 终于还是等于 add 了</p>
<h3 id="带参数的情况"><a href="#带参数的情况" class="headerlink" title="带参数的情况"></a>带参数的情况</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@logged(level=logging.CRITICAL, name='example')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">()</span>:</span></div><div class="line">  print(<span class="string">'Spam!'</span>)</div></pre></td></tr></table></figure>
<p>相当于</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">add = logged(level=logging.CRITICAL, name='example')(add) == partial(logged,xxx)(add)</div><div class="line"></div><div class="line">partial 封装的是logged, 参数:level=logging.CRITICAL, name='example'也被带入partial</div><div class="line">--&gt;partial_new(logged,level=logging.CRITICAL, name='example')</div><div class="line"></div><div class="line">partial(logged,xxx)(add) 调用 partial_call</div><div class="line">--&gt;partial_call(add)</div><div class="line">--&gt;logged(add,level=logging.CRITICAL, name='example')</div><div class="line">不过这里有个疑问是,logged 怎么指定 func==add?, add是作为PyTuple传入的,不是PyDict</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要topic&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Decorator是怎么调用的&lt;/li&gt;
&lt;li&gt;用partial来实现一个带参数的Decorator&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Decorator的调用&quot;&gt;&lt;a href=&quot;#Decorator的调用&quot; class=&quot;
    
    </summary>
    
    
      <category term="python" scheme="http://superway117.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python Decorator - 理解partial</title>
    <link href="http://superway117.github.io/2016/12/12/py_decorator_1/"/>
    <id>http://superway117.github.io/2016/12/12/py_decorator_1/</id>
    <published>2016-12-12T15:42:20.000Z</published>
    <updated>2016-12-16T02:49:00.078Z</updated>
    
    <content type="html"><![CDATA[<p>主要topic是partial的源码实现</p>
<h2 id="什么是partial"><a href="#什么是partial" class="headerlink" title="什么是partial"></a>什么是partial</h2><p><code>partial</code> 是<code>functools</code>里面的一个函数对象,虽然用起来就是一个函数.</p>
<p>它是一个<code>decorator function</code>,也就是说用来decorator其他函数的.</p>
<p>比如decorator add函数，它的第一个参数必须是一个函数,后面的参数,在真正执行add的时候，会带入到add里面,作为add的参数.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">9</span>]: <span class="keyword">from</span> functools <span class="keyword">import</span> partial</div><div class="line"></div><div class="line">In [<span class="number">10</span>]: <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a,b)</span>:</span></div><div class="line">....: <span class="keyword">return</span> a+b</div><div class="line">....:</div><div class="line"></div><div class="line">In [<span class="number">11</span>]: add(<span class="number">4</span>,<span class="number">3</span>)</div><div class="line">Out[<span class="number">11</span>]: <span class="number">7</span></div><div class="line"></div><div class="line">In [<span class="number">12</span>]: plus = partial(add,<span class="number">100</span>)</div><div class="line"></div><div class="line">In [<span class="number">13</span>]: plus(<span class="number">9</span>)</div><div class="line">Out[<span class="number">13</span>]: <span class="number">109</span></div><div class="line"></div><div class="line">In [<span class="number">14</span>]: plus2 = partial(add,<span class="number">99</span>)</div><div class="line"></div><div class="line">In [<span class="number">15</span>]: plus2(<span class="number">9</span>)</div><div class="line">Out[<span class="number">15</span>]: <span class="number">108</span></div></pre></td></tr></table></figure>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>打开python 2.7的源码,partial是用C语言实现的,对应的源码在  </p>
<blockquote>
<p>Python-2.7.11\Modules\_functoolsmodule.c</p>
</blockquote>
<p>主要3个函数：</p>
<ul>
<li>partial_new: 执行plus = partial(add,100),会创建一个partialobject对象</li>
<li>partial_dealloc: 释放partialobject对象</li>
<li>partial_call: 执行plus(9),会调用到这个函数</li>
<li>partial_setstate: 这个用来替换前面传入的add,以及参数, 一般情况很少用</li>
</ul>
<p>下面的这些函数,一般情况是用不上.</p>
<ul>
<li>partial_traverse</li>
<li>partial_get_dict</li>
<li>partial_set_dict</li>
</ul>
<h3 id="partial-new"><a href="#partial-new" class="headerlink" title="partial_new"></a>partial_new</h3><ul>
<li>创建partialobject对象</li>
<li><p>args是一个<code>PyTuple</code>,第一个参数必须是一个<code>PyCallable</code>，简单的说就是一个函数对象</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">func = PyTuple_GET_ITEM(args, <span class="number">0</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>args其他的参数会保存为 <code>pto-&gt;args</code></p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pto-&gt;args = PyTuple_GetSlice(args, 1, PY_SSIZE_T_MAX);</div></pre></td></tr></table></figure>
</li>
<li><p>kw如果存在会被<code>复制</code>一份</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pto-&gt;kw = (kw != NULL) ? PyDict_Copy(kw) : PyDict_New();</div></pre></td></tr></table></figure>
</li>
<li><p>dict默认是null, 后面可以通过<code>partial_set_dict</code>来设置</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pto-&gt;dict = NULL;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>source code<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">static PyObject *</div><div class="line">partial_new(PyTypeObject *type, PyObject *args, PyObject *kw)</div><div class="line">&#123;</div><div class="line">    PyObject *func;</div><div class="line">    partialobject *pto;</div><div class="line"></div><div class="line">    if (PyTuple_GET_SIZE(args) &lt; 1) &#123;</div><div class="line">        PyErr_SetString(PyExc_TypeError,</div><div class="line">                        "type 'partial' takes at least one argument");</div><div class="line">        return NULL;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    func = PyTuple_GET_ITEM(args, 0);</div><div class="line">    if (!PyCallable_Check(func)) &#123;</div><div class="line">        PyErr_SetString(PyExc_TypeError,</div><div class="line">                        "the first argument must be callable");</div><div class="line">        return NULL;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /* create partialobject structure */</div><div class="line">    pto = (partialobject *)type-&gt;tp_alloc(type, 0);</div><div class="line">    if (pto == NULL)</div><div class="line">        return NULL;</div><div class="line"></div><div class="line">    pto-&gt;fn = func;</div><div class="line">    Py_INCREF(func);</div><div class="line">    pto-&gt;args = PyTuple_GetSlice(args, 1, PY_SSIZE_T_MAX);</div><div class="line">    if (pto-&gt;args == NULL) &#123;</div><div class="line">        pto-&gt;kw = NULL;</div><div class="line">        Py_DECREF(pto);</div><div class="line">        return NULL;</div><div class="line">    &#125;</div><div class="line">    pto-&gt;kw = (kw != NULL) ? PyDict_Copy(kw) : PyDict_New();</div><div class="line">    if (pto-&gt;kw == NULL) &#123;</div><div class="line">        Py_DECREF(pto);</div><div class="line">        return NULL;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    pto-&gt;weakreflist = NULL;</div><div class="line">    pto-&gt;dict = NULL;</div><div class="line"></div><div class="line">    return (PyObject *)pto;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="partial-dealloc"><a href="#partial-dealloc" class="headerlink" title="partial_dealloc"></a>partial_dealloc</h3><p>new创建的所有对象的引用计数全部dec一下</p>
<h3 id="partial-call"><a href="#partial-call" class="headerlink" title="partial_call"></a>partial_call</h3><ul>
<li>执行plus(9),会调用到这个函数</li>
<li><p>args会做一次合并,如果都不为空的话</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">argappl = PySequence_Concat(pto-&gt;args, args);</div></pre></td></tr></table></figure>
</li>
<li><p>kw会做一次合并,如果都不为空的话</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (PyDict_Merge(kwappl, kw, <span class="number">1</span>) != <span class="number">0</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>基本上看到这里,大概能理解<code>partial</code>的作用了.</p>
<p>source code<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">static PyObject *</div><div class="line">partial_call(partialobject *pto, PyObject *args, PyObject *kw)</div><div class="line">&#123;</div><div class="line">    PyObject *ret;</div><div class="line">    PyObject *argappl = NULL, *kwappl = NULL;</div><div class="line"></div><div class="line">    assert (PyCallable_Check(pto-&gt;fn));</div><div class="line">    assert (PyTuple_Check(pto-&gt;args));</div><div class="line">    assert (pto-&gt;kw == Py_None  ||  PyDict_Check(pto-&gt;kw));</div><div class="line"></div><div class="line">    if (PyTuple_GET_SIZE(pto-&gt;args) == 0) &#123;</div><div class="line">        argappl = args;</div><div class="line">        Py_INCREF(args);</div><div class="line">    &#125; else if (PyTuple_GET_SIZE(args) == 0) &#123;</div><div class="line">        argappl = pto-&gt;args;</div><div class="line">        Py_INCREF(pto-&gt;args);</div><div class="line">    &#125; else &#123;</div><div class="line">        argappl = PySequence_Concat(pto-&gt;args, args);</div><div class="line">        if (argappl == NULL)</div><div class="line">            return NULL;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (pto-&gt;kw == Py_None) &#123;</div><div class="line">        kwappl = kw;</div><div class="line">        Py_XINCREF(kw);</div><div class="line">    &#125; else &#123;</div><div class="line">        kwappl = PyDict_Copy(pto-&gt;kw);</div><div class="line">        if (kwappl == NULL) &#123;</div><div class="line">            Py_DECREF(argappl);</div><div class="line">            return NULL;</div><div class="line">        &#125;</div><div class="line">        if (kw != NULL) &#123;</div><div class="line">            if (PyDict_Merge(kwappl, kw, 1) != 0) &#123;</div><div class="line">                Py_DECREF(argappl);</div><div class="line">                Py_DECREF(kwappl);</div><div class="line">                return NULL;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ret = PyObject_Call(pto-&gt;fn, argappl, kwappl);</div><div class="line">    Py_DECREF(argappl);</div><div class="line">    Py_XDECREF(kwappl);</div><div class="line">    return ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="partial的帮手"><a href="#partial的帮手" class="headerlink" title="partial的帮手"></a>partial的帮手</h2><p>从source code里面copy出来的注释:</p>
<blockquote>
<p>update_wrapper() and wraps() are tools to help write wrapper functions that can handle naive introspection</p>
</blockquote>
<p>简单的说,decorator function会导致被 decorator的函数,原有的<strong>module</strong>,<strong>name</strong>,<strong>doc</strong>丢失. update_wrapper() and wraps()就是为了解决这个问题存在的. 所以一般来说,还是多用<code>wraps</code>比较好,他会保留原函数的信息.</p>
<p>但是<code>wraps</code>有一个限制，用了这个函数，第一个参数是函数对象, 后面没机会他给传其他参数了.也就是说，只能传被wrapper的函数,后面调用的时候自己传了. <code>partial</code>就没用这个限制.</p>
<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p>下面是一个例子,用wraps来实现怎么打印一个函数的时间消耗.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">timethis</span><span class="params">(func)</span>:</span></div><div class="line">  <span class="string">'''</span></div><div class="line">  Decorator that reports the execution time.</div><div class="line">  '''</div><div class="line"><span class="meta">  @wraps(func)</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">    start = time.time()</div><div class="line">    result = func(*args, **kwargs)</div><div class="line">    end = time.time()</div><div class="line">    print(func.__name__, end-start)</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">  <span class="keyword">return</span> wrapper</div></pre></td></tr></table></figure>
<p>Here is an example of using the decorator:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>@timethis</div><div class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">countdown</span><span class="params">(n)</span>:</span></div><div class="line"><span class="meta">... </span><span class="string">'''</span></div><div class="line"><span class="meta">... </span>Counts down</div><div class="line"><span class="meta">... </span>'''</div><div class="line"><span class="meta">... </span><span class="keyword">while</span> n &gt; <span class="number">0</span>:</div><div class="line"><span class="meta">... </span>n -= <span class="number">1</span></div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>countdown(<span class="number">100000</span>)</div><div class="line">countdown <span class="number">0.008917808532714844</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>countdown(<span class="number">10000000</span>)</div><div class="line">countdown <span class="number">0.87188299392912</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p>前面提到wraps,只能</p>
<h3 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h3><p>代码行比较少,就是给新函数重新赋值原函数的信息.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">WRAPPER_ASSIGNMENTS = (<span class="string">'__module__'</span>, <span class="string">'__name__'</span>, <span class="string">'__doc__'</span>)</div><div class="line">WRAPPER_UPDATES = (<span class="string">'__dict__'</span>,)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_wrapper</span><span class="params">(wrapper,</span></span></div><div class="line">                   wrapped,</div><div class="line">                   assigned = WRAPPER_ASSIGNMENTS,</div><div class="line">                   updated = WRAPPER_UPDATES):</div><div class="line">    <span class="string">"""Update a wrapper function to look like the wrapped function</span></div><div class="line"></div><div class="line">       wrapper is the function to be updated</div><div class="line">       wrapped is the original function</div><div class="line">       assigned is a tuple naming the attributes assigned directly</div><div class="line">       from the wrapped function to the wrapper function (defaults to</div><div class="line">       functools.WRAPPER_ASSIGNMENTS)</div><div class="line">       updated is a tuple naming the attributes of the wrapper that</div><div class="line">       are updated with the corresponding attribute from the wrapped</div><div class="line">       function (defaults to functools.WRAPPER_UPDATES)</div><div class="line">    """</div><div class="line">    <span class="keyword">for</span> attr <span class="keyword">in</span> assigned:</div><div class="line">        setattr(wrapper, attr, getattr(wrapped, attr))</div><div class="line">    <span class="keyword">for</span> attr <span class="keyword">in</span> updated:</div><div class="line">        getattr(wrapper, attr).update(getattr(wrapped, attr, &#123;&#125;))</div><div class="line">    <span class="comment"># Return the wrapper so this can be used as a decorator via partial()</span></div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">wraps</span><span class="params">(wrapped,</span></span></div><div class="line">          assigned = WRAPPER_ASSIGNMENTS,</div><div class="line">          updated = WRAPPER_UPDATES):</div><div class="line">    <span class="string">"""Decorator factory to apply update_wrapper() to a wrapper function</span></div><div class="line"></div><div class="line">       Returns a decorator that invokes update_wrapper() with the decorated</div><div class="line">       function as the wrapper argument and the arguments to wraps() as the</div><div class="line">       remaining arguments. Default arguments are as for update_wrapper().</div><div class="line">       This is a convenience function to simplify applying partial() to</div><div class="line">       update_wrapper().</div><div class="line">    """</div><div class="line">    <span class="keyword">return</span> partial(update_wrapper, wrapped=wrapped,</div><div class="line">                   assigned=assigned, updated=updated)</div></pre></td></tr></table></figure>
<h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><p>copy from python cookbook</p>
<blockquote>
<p>Last, but not least, be aware that not all decorators utilize @wraps, and thus, they may not work as described. In particular, the built-in decorators @staticmethod and @class method create descriptor objects that don’t follow this convention (instead, they store the original function in a <strong>func</strong> attribute). Your mileage may vary.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要topic是partial的源码实现&lt;/p&gt;
&lt;h2 id=&quot;什么是partial&quot;&gt;&lt;a href=&quot;#什么是partial&quot; class=&quot;headerlink&quot; title=&quot;什么是partial&quot;&gt;&lt;/a&gt;什么是partial&lt;/h2&gt;&lt;p&gt;&lt;code&gt;part
    
    </summary>
    
    
      <category term="python" scheme="http://superway117.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python Package管理</title>
    <link href="http://superway117.github.io/2016/12/09/py_package_import/"/>
    <id>http://superway117.github.io/2016/12/09/py_package_import/</id>
    <published>2016-12-09T04:49:52.000Z</published>
    <updated>2016-12-09T06:39:41.952Z</updated>
    
    <content type="html"><![CDATA[<h2 id="init-py"><a href="#init-py" class="headerlink" title="init.py"></a><strong>init</strong>.py</h2><p>module(包括sub module)目录下面, 在py2.7上面,这个文件是需要的;在3.x上面,这个文件已经不是必须的.</p>
<p><code>__init__</code>是会被在module(submodule)加载之前加载 .</p>
<p><code>__init__</code>可以用来实现下面的功能:</p>
<ol>
<li><p>帮用户加载需要的submodule或者符号 </p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># graphics/formats/__init__.py</span></div><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> jpg</div><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> png</div></pre></td></tr></table></figure>
<p>这样的话用户只需要下面的语句,就可以得到需要的符号</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import graphics.formats</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="如何控制-export-symbol"><a href="#如何控制-export-symbol" class="headerlink" title="如何控制 export symbol"></a>如何控制 export symbol</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>下面的语句会导致把<code>module</code>里面的所有符号都导出. </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> module <span class="keyword">import</span> *</div></pre></td></tr></table></figure>
<p>这样的做法是不受鼓励的,但是事实上为了方便,我们经常这么干.</p>
<p>从性能或者从安全的角度出发,很多时候我们要控制export的符号</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p><code>__all__</code> 可以帮你控制输出的符号</p>
<p>demo<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># somemodule.py</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">()</span>:</span></div><div class="line">  <span class="keyword">pass</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">grok</span><span class="params">()</span>:</span></div><div class="line">  <span class="keyword">pass</span></div><div class="line"></div><div class="line">blah = <span class="number">42</span></div><div class="line"><span class="comment"># Only export 'spam' and 'grok'</span></div><div class="line">__all__ = [<span class="string">'spam'</span>, <span class="string">'grok'</span>]</div></pre></td></tr></table></figure></p>
<ul>
<li>如果你定义了<code>__all__</code>为一个空数组,那么nothing will be exported.</li>
<li>AttributeError is raised on import if <strong>all</strong> contains undefined names.</li>
</ul>
<h2 id="Namespace-Packages"><a href="#Namespace-Packages" class="headerlink" title="Namespace Packages"></a>Namespace Packages</h2><p>“namespace package” Essentially, a namespace package is a special kind of package designed for merging different directories of code together under a common namespace</p>
<p>links</p>
<ul>
<li><a href="https://www.python.org/dev/peps/pep-0420/" target="_blank" rel="external">Implicit Namespace Packages</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;init-py&quot;&gt;&lt;a href=&quot;#init-py&quot; class=&quot;headerlink&quot; title=&quot;init.py&quot;&gt;&lt;/a&gt;&lt;strong&gt;init&lt;/strong&gt;.py&lt;/h2&gt;&lt;p&gt;module(包括sub module)目录下面, 在py2.7上
    
    </summary>
    
    
      <category term="python" scheme="http://superway117.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python Thread Local</title>
    <link href="http://superway117.github.io/2016/12/07/py_thread_local/"/>
    <id>http://superway117.github.io/2016/12/07/py_thread_local/</id>
    <published>2016-12-06T16:54:05.000Z</published>
    <updated>2016-12-12T15:52:48.063Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>如何实现: 保存线程自己的值或者状态,并且这个值对其他线程是不可见</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><code>thread-local storage object</code> 可以用来满足这个需求,<code>thread-local</code>只有当前的线程可见.</p>
<h2 id="Sample-Code"><a href="#Sample-Code" class="headerlink" title="Sample Code"></a>Sample Code</h2><p>下面的code demo了怎么样使用 thread-local</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> socket, AF_INET, SOCK_STREAM</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LazyConnection</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, address, family=AF_INET, type=SOCK_STREAM)</span>:</span></div><div class="line">    self.address = address</div><div class="line">    self.family = AF_INET</div><div class="line">    self.type = SOCK_STREAM</div><div class="line">    self.local = threading.local()</div><div class="line">    <span class="keyword">print</span> <span class="string">"__init__"</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"__enter__"</span></div><div class="line">    <span class="keyword">if</span> hasattr(self.local, <span class="string">'sock'</span>):</div><div class="line">      <span class="keyword">raise</span> RuntimeError(<span class="string">'Already connected'</span>)</div><div class="line">    self.local.sock = socket(self.family, self.type)</div><div class="line">    self.local.sock.connect(self.address)</div><div class="line">    <span class="keyword">return</span> self.local.sock</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_ty, exc_val, tb)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"__exit__"</span></div><div class="line">    self.local.sock.close()</div><div class="line">    <span class="keyword">del</span> self.local.sock</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(conn)</span>:</span></div><div class="line">  <span class="keyword">with</span> conn <span class="keyword">as</span> s:</div><div class="line">    s.send(<span class="string">b'GET /index.html HTTP/1.0\r\n'</span>)</div><div class="line">    s.send(<span class="string">b'Host: www.python.org\r\n'</span>)</div><div class="line"></div><div class="line">    s.send(<span class="string">b'\r\n'</span>)</div><div class="line">    resp = <span class="string">b''</span>.join(iter(partial(s.recv, <span class="number">8192</span>), <span class="string">b''</span>))</div><div class="line">    print(<span class="string">'Got &#123;&#125; bytes'</span>.format(len(resp)))</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">  conn = LazyConnection((<span class="string">'www.python.org'</span>, <span class="number">80</span>))</div><div class="line">  t1 = threading.Thread(target=test, args=(conn,))</div><div class="line">  t2 = threading.Thread(target=test, args=(conn,))</div><div class="line">  t1.start()</div><div class="line">  t2.start()</div><div class="line">  t1.join()</div><div class="line">  t2.join()</div></pre></td></tr></table></figure>
<p>打印的结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">__init__</div><div class="line">__enter__</div><div class="line">__enter__</div><div class="line">Got 795 bytes</div><div class="line">__exit__</div><div class="line">Got 795 bytes</div><div class="line">__exit__</div></pre></td></tr></table></figure>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>打开python 2.7的源码,thread local 对应的源码在  </p>
<blockquote>
<p>Python-2.7.11\Lib\_threading_local.py</p>
</blockquote>
<p>thread local 就是下面的继承关系</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">object &gt; _localbase &gt; local</div></pre></td></tr></table></figure>
<h3 id="如何实现线程独立拥有自己的local"><a href="#如何实现线程独立拥有自己的local" class="headerlink" title="如何实现线程独立拥有自己的local"></a>如何实现线程独立拥有自己的local</h3><p>仔细看上面的code, LazyConnection 只实例化了一次,也就是说<code>__init__</code>只调用了一次,所以<code>conn</code>对各个线程来说是共享的,为什么下面的 socket 赋值可以做到各个线程拥有独立的sock对象?</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.local.sock = socket(self.family, self.type)</div></pre></td></tr></table></figure>
<p>虽然new 一个 local 实例, 这个实例对于所有线程是共享的,但是真正执行set/get操作的实现在 _patch,这个函数是关键.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_patch</span><span class="params">(self)</span>:</span></div><div class="line">    key = object.__getattribute__(self, <span class="string">'_local__key'</span>)</div><div class="line">    d = current_thread().__dict__.get(key)</div><div class="line">    <span class="keyword">if</span> d <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        d = &#123;&#125;</div><div class="line">        current_thread().__dict__[key] = d</div><div class="line">        object.__setattr__(self, <span class="string">'__dict__'</span>, d)</div><div class="line"></div><div class="line">        <span class="comment"># we have a new instance dict, so call out __init__ if we have</span></div><div class="line">        <span class="comment"># one</span></div><div class="line">        cls = type(self)</div><div class="line">        <span class="keyword">if</span> cls.__init__ <span class="keyword">is</span> <span class="keyword">not</span> object.__init__:</div><div class="line">            args, kw = object.__getattribute__(self, <span class="string">'_local__args'</span>)</div><div class="line">            cls.__init__(self, *args, **kw)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        object.__setattr__(self, <span class="string">'__dict__'</span>, d)</div></pre></td></tr></table></figure>
<p>先看 if d is not None 的case</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">object.__setattr__(self, <span class="string">'__dict__'</span>, d)</div></pre></td></tr></table></figure>
<p>也就是说 每次set/get的时候，上面这句话改变了 <code>__dict__</code>,他把 <code>current_thread().__dict__.get(key)</code> 赋值给了<code>__dict__</code>, 而对object的set/get 操作，实际也就是对 <code>__dict__</code>的操作.</p>
<h3 id="如何实现lock"><a href="#如何实现lock" class="headerlink" title="如何实现lock"></a>如何实现lock</h3><p>因为每次都要改变local.<strong>dict</strong>,必然存在一个问题,就是要锁操作.</p>
<p>下面的代码会构造一个RLock 给 local, 注意,这个rlock是给local的,也就是说所有线程都是用这个rlock来执行锁操作的.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">_localbase</span><span class="params">(object)</span>:</span></div><div class="line">    __slots__ = <span class="string">'_local__key'</span>, <span class="string">'_local__args'</span>, <span class="string">'_local__lock'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kw)</span>:</span></div><div class="line">        self = object.__new__(cls)</div><div class="line">        key = <span class="string">'_local__key'</span>, <span class="string">'thread.local.'</span> + str(id(self))</div><div class="line">        object.__setattr__(self, <span class="string">'_local__key'</span>, key)</div><div class="line">        object.__setattr__(self, <span class="string">'_local__args'</span>, (args, kw))</div><div class="line">        object.__setattr__(self, <span class="string">'_local__lock'</span>, RLock())</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (args <span class="keyword">or</span> kw) <span class="keyword">and</span> (cls.__init__ <span class="keyword">is</span> object.__init__):</div><div class="line">            <span class="keyword">raise</span> TypeError(<span class="string">"Initialization arguments are not supported"</span>)</div><div class="line"></div><div class="line">        <span class="comment"># We need to create the thread dict in anticipation of</span></div><div class="line">        <span class="comment"># __init__ being called, to make sure we don't call it</span></div><div class="line">        <span class="comment"># again ourselves.</span></div><div class="line">        dict = object.__getattribute__(self, <span class="string">'__dict__'</span>)</div><div class="line">        current_thread().__dict__[key] = dict</div><div class="line"></div><div class="line">        <span class="keyword">return</span> self</div></pre></td></tr></table></figure>
<p>看下local get操作 ,进入之前acquire,finally 保证了释放</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self, name)</span>:</span></div><div class="line">  lock = object.__getattribute__(self, <span class="string">'_local__lock'</span>)</div><div class="line">  lock.acquire()</div><div class="line">  <span class="keyword">try</span>:</div><div class="line">      _patch(self)</div><div class="line">      <span class="keyword">return</span> object.__getattribute__(self, name)</div><div class="line">  <span class="keyword">finally</span>:</div><div class="line">      lock.release()</div></pre></td></tr></table></figure>
<h3 id="slots"><a href="#slots" class="headerlink" title="__slots__"></a>__slots__</h3><p>_localbase 用 __slots__ 来限制 local的 instance variables</p>
<p>__slots__ 的解释: copy from <a href="https://www.python.org/download/releases/2.2.2/descrintro/" target="_blank" rel="external">python org</a></p>
<blockquote>
<p>The __slots__ declaration takes a list of instance variables, and reserves space in the instance for exactly these in the instance. When __slots__ is used, other instance variables cannot be assigned to</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">defaultdict2</span><span class="params">(dict)</span>:</span></div><div class="line"></div><div class="line">    __slots__ = [<span class="string">'default'</span>]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, default=None)</span>:</span></div><div class="line">    ...(like before)...</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; a = defaultdict2(default=0.0)</div><div class="line">&gt;&gt;&gt; a[1]</div><div class="line">0.0</div><div class="line">&gt;&gt;&gt; a.default = -1</div><div class="line">&gt;&gt;&gt; a[1]</div><div class="line">-1</div><div class="line">&gt;&gt;&gt; a.x1 = 1</div><div class="line">Traceback (most recent call last):</div><div class="line">  File "&lt;stdin&gt;", line 1, in ?</div><div class="line">AttributeError: 'defaultdict2' object has no attribute 'x1'</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;如何实现: 保存线程自己的值或者状态,并且这个值对其他线程是不可见&lt;/p&gt;
&lt;h2 id=&quot;Solu
    
    </summary>
    
    
      <category term="python" scheme="http://superway117.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Usage</title>
    <link href="http://superway117.github.io/2016/12/06/hexo_usage/"/>
    <id>http://superway117.github.io/2016/12/06/hexo_usage/</id>
    <published>2016-12-06T00:54:05.000Z</published>
    <updated>2016-12-07T16:40:26.491Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
      <category term="hexo" scheme="http://superway117.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
