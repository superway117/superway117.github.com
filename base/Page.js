// Generated by CoffeeScript 1.4.0
(function() {
  var $, DynamicPanel, MixedPanel, Page, PageStack, Panel, StaticPanel,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  $ = Spine.$;

  Page = (function(_super) {

    __extends(Page, _super);

    Page.prototype.controllers = {};

    Page.prototype.tmplId = null;

    Page.prototype.footerMenuItem = null;

    Page.prototype.footerMenuLoaded = false;

    function Page(options) {
      var key, value, _fn, _ref, _ref1,
        _this = this;
      Page.__super__.constructor.apply(this, arguments);
      this.loadFromTemplate();
      this.manager = new Spine.Manager;
      _ref = this.controllers;
      for (key in _ref) {
        value = _ref[key];
        this[key] = new value({
          page: this
        });
        this.addPanel(this[key]);
      }
      _ref1 = this.routes;
      _fn = function(key, value) {
        var callback;
        if (typeof value === 'function') {
          callback = value;
        }
        callback || (callback = function() {
          var _ref2;
          return (_ref2 = _this[value]).active.apply(_ref2, arguments);
        });
        return _this.route(key, callback);
      };
      for (key in _ref1) {
        value = _ref1[key];
        _fn(key, value);
      }
      if (this["default"]) {
        this[this["default"]].el.addClass("active");
      }
    }

    Page.prototype.loadFromTemplate = function() {
      this.replace($("#" + this.tmplId).html());
      this.content = this.$("div[data-role=content]");
      this.headerDropMenu = this.$("div[data-role=header] .pull-right .dropdown-menu");
      this.footerMenu = this.$("div[data-role=footer] .navbar .nav");
      return this.quickBar = this.$("div[data-role='header'] ul[data-role='quickbar']");
    };

    Page.prototype.loadFooterMenu = function() {
      var item, _i, _len, _ref,
        _this = this;
      if (this.footerMenuLoaded) {
        return;
      }
      this.footerMenu.empty();
      _ref = this.stack.getFooterMenu();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        this.footerMenu.append($("#menuItemTmpl").tmpl(item));
      }
      $("a", this.footerMenu).click(function(e) {
        var name;
        name = $(e.target).attr("name");
        return _this.stack[name].active();
      });
      if (this.footerMenuItem) {
        $("a[name=" + this.footerMenuItem.name + "]", this.footerMenu).addClass("active");
      }
      return this.footerMenuLoaded = true;
    };

    Page.prototype.appendQuickBar = function(item) {
      return this.quickBar.append($("#menuItemTmpl").tmpl(item));
    };

    Page.prototype.clearQuickBar = function() {
      return this.quickBar.empty();
    };

    Page.prototype.appendHeaderMenu = function(item) {
      return this.headerDropMenu.append($("#menuItemTmpl").tmpl(item));
    };

    Page.prototype.clearHeaderMenu = function() {
      return this.headerDropMenu.empty();
    };

    Page.prototype.addPanel = function(panel) {
      var _this = this;
      this.manager.add(panel);
      this.content.append(panel.el);
      if (panel.headerMenuItem) {
        this.appendHeaderMenu(panel.headerMenuItem);
        $("a[name=" + panel.headerMenuItem.name + "]", this.headerDropMenu).click(function() {
          return _this[panel.headerMenuItem.name].active();
        });
      }
      return this.el;
    };

    Page.prototype.slientActive = function(current) {
      var cont, _i, _len, _ref, _results;
      _ref = this.manager.controllers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cont = _ref[_i];
        if (cont === current) {
          _results.push(cont.el.addClass('active'));
        } else {
          _results.push(cont.el.removeClass('active'));
        }
      }
      return _results;
    };

    Page.prototype.getActive = function() {
      var con, key, value, _ref;
      _ref = this.controllers;
      for (key in _ref) {
        value = _ref[key];
        if (this[key].isActive()) {
          con = this[key];
        }
      }
      return con || (con = this[this["default"]]);
    };

    Page.prototype.activate = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      Page.__super__.activate.apply(this, arguments);
      this.loadFooterMenu();
      return (_ref = this.getActive()) != null ? _ref.active.apply(_ref, args) : void 0;
    };

    Page.prototype.refresh = function() {
      var _ref;
      return (_ref = this.getActive()) != null ? _ref.refresh() : void 0;
    };

    Page.prototype.registerPageEvent = function(event, callback) {
      return this.stack.registerPageEvent(event, this, callback);
    };

    Page.prototype.triggerPageEvent = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = this.stack).trigger.apply(_ref, args);
    };

    return Page;

  })(Spine.Controller);

  PageStack = (function(_super) {

    __extends(PageStack, _super);

    function PageStack(options) {
      PageStack.__super__.constructor.apply(this, arguments);
      Spine.Route.setup();
    }

    PageStack.prototype.getActive = function() {
      var con, key, value, _ref;
      _ref = this.controllers;
      for (key in _ref) {
        value = _ref[key];
        if (this[key].isActive()) {
          con = this[key];
        }
      }
      return con || (con = this[this["default"]]);
    };

    PageStack.prototype.getFooterMenu = function() {
      var key, value, _ref, _results;
      _ref = this.controllers;
      _results = [];
      for (key in _ref) {
        value = _ref[key];
        if (this[key].footerMenuItem) {
          _results.push(this[key].footerMenuItem);
        }
      }
      return _results;
    };

    PageStack.prototype.registerPageEvent = function(event, page, callback) {
      var _this = this;
      return this.bind(event, function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (callback.apply(null, args)) {
          return page.active.apply(page, args);
        }
      });
    };

    return PageStack;

  })(Spine.Stack);

  Panel = (function(_super) {

    __extends(Panel, _super);

    Panel.prototype.tmplId = null;

    function Panel() {
      Panel.__super__.constructor.apply(this, arguments);
      this.el.attr("data-role", "panel");
    }

    Panel.prototype.refresh = function(callbackOrParams) {
      if (typeof callbackOrParams === 'function') {
        return this.bind('refresh', callbackOrParams);
      } else {
        return this.trigger('refresh', callbackOrParams);
      }
    };

    Panel.prototype.activate = function() {
      Panel.__super__.activate.apply(this, arguments);
      return this.refresh(arguments);
    };

    Panel.prototype.isActive = function() {
      if (this.page.isActive() === false) {
        return false;
      }
      return Panel.__super__.isActive.apply(this, arguments);
    };

    return Panel;

  })(Spine.Controller);

  DynamicPanel = (function(_super) {

    __extends(DynamicPanel, _super);

    function DynamicPanel() {
      DynamicPanel.__super__.constructor.apply(this, arguments);
      this.bind('dataReady', this.render);
      this.bind("refresh", this.fetchData);
    }

    DynamicPanel.prototype.render = function(data) {
      this.el.html($("#" + this.tmplId).tmpl(data));
      return this.refreshElements();
    };

    return DynamicPanel;

  })(Panel);

  StaticPanel = (function(_super) {

    __extends(StaticPanel, _super);

    function StaticPanel() {
      StaticPanel.__super__.constructor.apply(this, arguments);
      this.el.html($("#" + this.tmplId).html());
      this.refreshElements();
      this.refresh(this.render);
    }

    return StaticPanel;

  })(Panel);

  MixedPanel = (function(_super) {

    __extends(MixedPanel, _super);

    function MixedPanel() {
      MixedPanel.__super__.constructor.apply(this, arguments);
      this.bind('dataReady', this.render);
      this.bind("refresh", this.fetchData);
      this.el.html($("#" + this.tmplId).html());
      this.refreshElements();
    }

    return MixedPanel;

  })(Panel);

  window.Stock["Panel"] = Panel;

  window.Stock["DynamicPanel"] = DynamicPanel;

  window.Stock["StaticPanel"] = StaticPanel;

  window.Stock["MixedPanel"] = MixedPanel;

  window.Stock["Page"] = Page;

  window.Stock["PageStack"] = PageStack;

}).call(this);
