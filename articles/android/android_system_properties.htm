<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=gb2312">
<meta name=Generator content="Microsoft Word 12 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:宋体;
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:"\@宋体";
	panose-1:2 1 6 0 3 1 1 1 1 1;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.5pt;
	font-family:"Calibri","sans-serif";}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
pre
	{mso-style-link:"HTML Preformatted Char";
	margin:0cm;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:宋体;}
p.MsoAcetate, li.MsoAcetate, div.MsoAcetate
	{mso-style-link:"Balloon Text Char";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:8.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoListParagraph, li.MsoListParagraph, div.MsoListParagraph
	{margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:21.0pt;
	font-size:10.5pt;
	font-family:"Calibri","sans-serif";}
span.BalloonTextChar
	{mso-style-name:"Balloon Text Char";
	mso-style-link:"Balloon Text";}
span.HTMLPreformattedChar
	{mso-style-name:"HTML Preformatted Char";
	mso-style-link:"HTML Preformatted";
	font-family:宋体;}
 /* Page Definitions */
 @page WordSection1
	{size:595.3pt 841.9pt;
	margin:72.0pt 90.0pt 72.0pt 90.0pt;
	layout-grid:15.6pt;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>

</head>

<body lang=ZH-CN link=blue vlink=purple style='text-justify-trim:punctuation'>

<div class=WordSection1 style='layout-grid:15.6pt'>

<p class=MsoNormal><b><span lang=EN-US style='font-size:22.0pt'>Android System
Properties</span></b></p>

<p class=MsoNormal><span style='font-family:宋体'>首先需要说明的是<span lang=EN-US>Dalvik</span>有自己的<span
lang=EN-US>Property</span>实现<span lang=EN-US>,java</span>层面调用的接口是<span
lang=EN-US>System.setProperty System.getProperty. </span>这篇讲的是<span lang=EN-US>android
framework(system/core)</span>里面实现的<span lang=EN-US>Property, </span>他是一个全局的设置<span
lang=EN-US>,</span>有点像<span lang=EN-US>windows</span>上面的环境变量<span lang=EN-US>,</span>但是用环境变量这个词也是有陷阱的<span
lang=EN-US>,</span>在<span lang=EN-US>android</span>系统里面<span lang=EN-US>,</span>每个进程确实是有个环境变量<span
lang=EN-US>,</span>而且通常来说<span lang=EN-US>,</span>这个环境变量都是从父进程继承过来的<span
lang=EN-US>,</span>但是和<span lang=EN-US>Property</span>还不是一个东西<span lang=EN-US>,Property</span>的实现也有部分依赖这个环境变量的机制<span
lang=EN-US>.</span></span></p>

<p class=MsoNormal><span style='font-family:宋体'>感官上来认识下<span lang=EN-US>Property,</span>打开<span
lang=EN-US>init.rc(system/core/rootdir)</span>，搜索<span lang=EN-US>setprop</span>，可以看到许多属性的设置<span
lang=EN-US>,</span>比如<span lang=EN-US><br>
setprop ro.FOREGROUND_APP_ADJ 0</span></span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>ro.FOREGROUND_APP_ADJ</span><span
style='font-family:宋体'>就是一个<span lang=EN-US>property</span>的<span lang=EN-US>key,
value</span>就是<span lang=EN-US>0</span>，其中<span lang=EN-US>ro</span>表示<span
lang=EN-US>readonly</span>。这就是一个<span lang=EN-US>property item</span>。所谓的<span
lang=EN-US>system Properties</span>就是许多的这样的<span lang=EN-US>item</span>组成<span
lang=EN-US>.</span></span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>先来一个框图（</span><span lang=EN-US><a
href="http://rxwen.blogspot.de/2010/01/android-property-system.html"><span
lang=EN-US style='font-family:宋体'><span lang=EN-US>图转载</span></span></a></span><span
style='font-family:宋体'>） 其实我想吐槽几句<span lang=EN-US>,</span>这部分逻辑其实不是特别复杂，为毛感觉写的有点坑爹</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'><img border=0
width=554 height=477 id="Picture 4"
src="android_system_properties_files/image001.png"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><b><span style='font-size:16.0pt;font-family:宋体'>从数据结构的角度来看<span
lang=EN-US>System Properties</span></span></b></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=554 height=254
id="Picture 3" src="android_system_properties_files/image002.png"></span></p>

<pre><span lang=EN-US style='font-size:10.5pt;color:black'>struct prop_area {<br>
unsigned volatile count;&nbsp; //prop_info </span><span style='font-size:10.5pt;
color:black'>个数<span lang=EN-US><br>
unsigned volatile serial; //</span>整个<span lang=EN-US>prop_area</span>被修改的次数<span
lang=EN-US>,</span>包括新增，<span lang=EN-US>update<br>
unsigned magic;<br>
unsigned version;<br>
unsigned reserved[4];<br>
unsigned toc[1];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //name length + prop_info address offset<br>
};</span></span></pre><pre><span style='font-size:10.5pt;color:black'>粉红区域是整个<span
lang=EN-US>prop_area</span>的<span lang=EN-US>header,</span>这部分占用<span
lang=EN-US>PA_INFO_START(1024)</span>字节<span lang=EN-US>,</span>数据结构上面仍然用<span
lang=EN-US>prop_area</span>表示<span lang=EN-US>.</span></span></pre><pre><span
lang=EN-US style='font-size:10.5pt;color:black'>toc</span><span
style='font-size:10.5pt;color:black'>是一个<span lang=EN-US>32bits unsigned</span>的数组<span
lang=EN-US>,</span>每个<span lang=EN-US>32bits</span>的高<span lang=EN-US>8</span>位表示<span
lang=EN-US>prop_info key name length,</span>低<span lang=EN-US>24</span>位表示对应<span
lang=EN-US>prop_info</span>的地址相对<span lang=EN-US>pr</span><span lang=EN-US>op_area</span>起始地址的位移<span
lang=EN-US>.</span>这里高<span lang=EN-US>8</span>位保存<span lang=EN-US>name length</span>的目的是为了查找某个<span
lang=EN-US>key</span>的时候<span lang=EN-US>,</span>先去匹配长度<span lang=EN-US>,</span>如果长度匹配了<span
lang=EN-US>,</span>才根据<span lang=EN-US>toc</span>的后<span lang=EN-US>24</span>位去查找真正的<span
lang=EN-US>key name.</span></span></pre><pre><span style='font-size:10.5pt;
color:black'>再来看<span lang=EN-US>prop_info:</span></span></pre><pre><span
lang=EN-US style='font-size:10.5pt;color:black'>struct prop_info {<br>
char name[PROP_NAME_MAX];<br>
unsigned volatile serial;&nbsp; //value length + update counter<br>
char value[PROP_VALUE_MAX];<br>
};</span></pre><pre><span style='font-size:10.5pt'>其中<span lang=EN-US>serial</span>高<span
lang=EN-US>8</span>位表示<span lang=EN-US>value length,</span>剩下的<span lang=EN-US>24bits</span>表示被修改的次数，第一次添加低<span
lang=EN-US>24</span>位是<span lang=EN-US>0</span>，他只是表示<span lang=EN-US>update</span>的次数</span></pre><pre><span
style='font-size:10.5pt'>需要说明的是在数据结构里面<span lang=EN-US>key-value</span>都是字符串<span
lang=EN-US>,</span>但是在<span lang=EN-US>java</span>的接口里面会做转义<span lang=EN-US>,</span>比如<span
lang=EN-US>value</span>是<span lang=EN-US>true</span>或者<span lang=EN-US>yes</span>的时候<span
lang=EN-US>,</span>就可以当作<span lang=EN-US>boolean true</span></span></pre><pre><span
lang=EN-US style='font-size:10.5pt'>&nbsp;</span></pre>

<p class=MsoNormal><b><span style='font-size:16.0pt;font-family:宋体'>从存储的角度来看<span
lang=EN-US>System Properties</span></span></b></p>

<pre><span lang=EN-US style='font-size:10.5pt'>Android</span><span
style='font-size:10.5pt'>实现了一套共享内存的机制叫<span lang=EN-US>ashmem,System Properties</span>就是使用了这种共享内存机制</span></pre><pre><span
lang=EN-US style='font-size:10.5pt'>Main(Init.c) -&gt; property_init(property_service.c) -&gt; init_property_area -&gt; init_workspace</span></pre><pre><span
style='font-size:10.5pt'>从上面的调用关系可以看出<span lang=EN-US>,init</span>进程最终调用了<span
lang=EN-US>init_workspace</span></span></pre>

<p class=MsoNormal><span style='font-family:宋体'>看下</span><span lang=EN-US
style='font-family:宋体'>init_workspace</span><span style='font-family:宋体'>的实现<span
lang=EN-US>(</span>除掉了出错处理的代码<span lang=EN-US>)</span></span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>static int
init_workspace(workspace *w, size_t size)</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>{</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
void *data;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
int fd;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp; <b>fd
= ashmem_create_region(&quot;system_properties&quot;, size);</b></span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
data = mmap(NULL, size, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
/* allow the wolves we share with to do nothing but read */</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
ashmem_set_prot_region(fd, PROT_READ);</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
w-&gt;data = data;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
w-&gt;size = size;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
w-&gt;fd = fd;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
return 0;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>}</span></p>

<p class=MsoNormal><span style='font-family:宋体'>这个时候问题来了<span lang=EN-US>,</span>其他进程怎么知道这个<span
lang=EN-US>fd</span>呢<span lang=EN-US>,</span>换句话，即使我知道有这个共享内存，怎么去拿到他的<span
lang=EN-US>handle(fd)</span></span></p>

<p class=MsoNormal><span style='font-family:宋体'>到函数<span lang=EN-US>service_start(init.c)</span>里面看看<span
lang=EN-US>,</span>这个函数去执行<span lang=EN-US>service</span>，简单点说就是<span
lang=EN-US>:</span></span></p>

<p class=MsoListParagraph style='margin-left:18.0pt;text-indent:-18.0pt'><span
lang=EN-US style='font-family:宋体'>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span lang=EN-US style='font-family:宋体'>Fork process for service</span></p>

<p class=MsoListParagraph style='margin-left:18.0pt;text-indent:-18.0pt'><span
lang=EN-US style='font-family:宋体'>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span lang=EN-US style='font-family:宋体'>Execve </span></p>

<p class=MsoNormal><span style='font-family:宋体'>看下代码<span lang=EN-US>:</span></span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>pid = fork();</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>if (pid == 0) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //child
process case(service)</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>……</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>get_property_workspace(&amp;fd,
&amp;sz);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span style='font-family:
宋体'>这句话就是去获得共享内存的<span lang=EN-US>fd</span>以及<span lang=EN-US>size</span></span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>sprintf(tmp,
&quot;%d,%d&quot;, dup(fd), sz);</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>//</span><span
style='font-family:宋体'>下面的这个<span lang=EN-US>environment</span>不是<span
lang=EN-US>libc(libc_init_common.c)</span>里面为每个进程定义的<span lang=EN-US>environ,</span>这里是<span
lang=EN-US>init</span>进程自己定义的静态变量<span lang=EN-US>static const char *ENV[32];</span>下面这句就是把<span
lang=EN-US>fd</span>，<span lang=EN-US>size</span>写到<span lang=EN-US>init</span>进程的静态变量里面去</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>add_environment(&quot;ANDROID_PROPERTY_WORKSPACE&quot;,
tmp);</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>……</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>//</span><span
style='font-family:宋体'>把<span lang=EN-US>ENV</span>当作进程的环境变量传给<span lang=EN-US>service</span>进程</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>execve(svc-&gt;args[0],
(char**) svc-&gt;args, (char**) ENV)</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>}</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:宋体'>再看来进程执行入口函数的时候怎么处理环境变量，打开<span
lang=EN-US>libc_init_common.c</span>，找到<span lang=EN-US>__libc_init_common(elfdata)</span>：</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>void
__libc_init_common(uintptr_t *elfdata)</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>{</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp; <b>int&nbsp;&nbsp;&nbsp;&nbsp;
argc = *elfdata;</b></span></p>

<p class=MsoNormal><b><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
char**&nbsp; argv = (char**)(elfdata + 1);</span></b></p>

<p class=MsoNormal style='text-indent:20.25pt'><b><span lang=EN-US
style='font-family:宋体'>char**&nbsp; envp = argv + argc + 1;</span></b></p>

<p class=MsoNormal style='text-indent:20.25pt'><span lang=EN-US
style='font-family:宋体'>……</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
/* setup environment pointer */</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp; <b>environ
= envp;</b></span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
/* setup system properties - requires environment */</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp; <b>__system_properties_init();</b></span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>}</span></p>

<p class=MsoNormal><span style='font-family:宋体'>只有<span lang=EN-US>__libc_init_common</span>怎么被调用到<span
lang=EN-US>,</span>还没有完全看明白，回头继续，和这个主题倒是关系不大<span lang=EN-US>.</span></span></p>

<p class=MsoNormal><span style='font-family:宋体'>打开<span lang=EN-US>__system_properties_init(system_properties.c),</span>然后就比较清晰了<span
lang=EN-US>.</span></span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>int
__system_properties_init(void)</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>{</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
prop_area *pa;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
int s, fd;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
unsigned sz;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
char *env;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
if(__system_property_area__ != ((void*) &amp;dummy_props)) {</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return 0;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='text-indent:20.25pt'><span lang=EN-US
style='font-family:宋体'>//</span><span style='font-family:宋体'>拿到环境变量，这个环境变量里面存的<span
lang=EN-US>fd</span>，<span lang=EN-US>size</span></span></p>

<p class=MsoNormal style='text-indent:20.25pt'><b><span lang=EN-US
style='font-family:宋体'>env = getenv(&quot;ANDROID_PROPERTY_WORKSPACE&quot;);&nbsp;&nbsp; </span></b></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
if (!env) {</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return -1;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp; <b>fd
= atoi(env);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</b></span><b><span
style='font-family:宋体'>绕了半天就是为了这个<span lang=EN-US>fd</span></span></b></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
env = strchr(env, ',');</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
if (!env) {</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return -1;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
sz = atoi(env + 1);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>共享内存的<span lang=EN-US>size</span></span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>做一个<span lang=EN-US>mmap</span>，注意是<span lang=EN-US>PROT_READ</span>，也就说在除了<span
lang=EN-US>init</span>进程，其他进程对<span lang=EN-US>system property</span>都是只读的，如果要写，需要通过专门的接口，这个接口实际上是发了一个<span
lang=EN-US>socket</span>消息，只有<span lang=EN-US>init</span>进程才能去写<span
lang=EN-US>system property</span></span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp; <b>pa
= mmap(0, sz, PROT_READ, MAP_SHARED, fd, 0);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
</b></span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
if(pa == MAP_FAILED) {</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return -1;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
if((pa-&gt;magic != PROP_AREA_MAGIC) || (pa-&gt;version != PROP_AREA_VERSION))
{</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
munmap(pa, sz);</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return -1;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='margin-left:15.75pt;text-indent:-15.75pt'><span
lang=EN-US style='font-family:宋体'>&nbsp;&nbsp; //</span><span style='font-family:
宋体'>因为每个进程都会执行这个函数，<span lang=EN-US>__system_property_area__</span>也是一个<span
lang=EN-US>static</span>变量，所以每个进程都有一个独立的对<span lang=EN-US>system properties</span>的引用，上面的<span
lang=EN-US>mmap</span>也看到了，我们只能通过这个静态变量去读<span lang=EN-US>system property</span></span></p>

<p class=MsoNormal style='text-indent:20.25pt'><span lang=EN-US
style='font-family:宋体'>__system_property_area__ = pa;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;
</span></p>

<p class=MsoNormal style='text-indent:20.25pt'><span lang=EN-US
style='font-family:宋体'>return 0;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>}</span></p>

<p class=MsoNormal><span style='font-family:宋体'>看看<span lang=EN-US>android</span>提供的对外接口<span
lang=EN-US>(C), system\core\libcutils\properties.c</span></span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>int
property_get(const char *key, char *value, const char *default_value)</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>{</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
int len;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
len = __system_property_get(key, value);</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp; …</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
return len;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>}</span></p>

<p class=MsoNormal><span style='font-family:宋体'>每个进程都可以调用这个函数去同步读<span
lang=EN-US>property</span>。</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;</span></p>

<p class=MsoNormal><b><span style='font-size:16.0pt;font-family:宋体'>从通信机制的角度来看<span
lang=EN-US>System Properties</span></span></b></p>

<p class=MsoNormal><span style='font-family:宋体'>对于<span lang=EN-US>properties</span>来说，无法就是读写<span
lang=EN-US>2</span>个操作，读操作上面已经看到了，通过共享内存直接读，但是对于写以及控制<span lang=EN-US>(</span>吐槽<span
lang=EN-US>again</span>，这个我就无法理解了，这个控制是控制其他<span lang=EN-US>service</span>的<span
lang=EN-US>start</span>和<span lang=EN-US>stop</span>，这个也太图方便了吧<span lang=EN-US>)</span>是通过<span
lang=EN-US>socket</span>来通信的。</span></p>

<p class=MsoNormal><span style='font-family:宋体'>看看<span lang=EN-US>android</span>提供的对外接口<span
lang=EN-US>(C), system\core\libcutils\properties.c</span></span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>int
property_set(const char *key, const char *value)&nbsp; //</span><span
style='font-family:宋体'>去掉了错误处理</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>{</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
prop_msg msg;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
unsigned resp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
msg.cmd = PROP_MSG_SETPROP;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
strcpy((char*) msg.name, key);</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
strcpy((char*) msg.value, value);</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
return send_prop_msg(&amp;msg);</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>}</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>static int
send_prop_msg(prop_msg *msg)</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>{</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
int s;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
int r;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp; s
= socket_local_client(PROP_SERVICE_NAME, </span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
ANDROID_SOCKET_NAMESPACE_RESERVED,</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
SOCK_STREAM);</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
if(s &lt; 0) return -1;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
while((r = send(s, msg, sizeof(prop_msg), 0)) &lt; 0) {</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if((errno == EINTR) || (errno == EAGAIN)) continue;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;break;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
if(r == sizeof(prop_msg)) {</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
r = 0;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp; }
else {</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
r = -1;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
close(s);</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
return r;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>}</span></p>

<p class=MsoNormal><span style='font-family:宋体'>简单的说就是通过<span lang=EN-US>socket</span>发了一个消息给服务器<span
lang=EN-US>(init</span>进程那边有监听连接<span lang=EN-US>)</span>。</span></p>

<p class=MsoNormal><span style='font-family:宋体'>这里要说明下，通过这个接口<span lang=EN-US>property_set</span>可以<span
lang=EN-US>start&amp;stop service</span>，如果要控制<span lang=EN-US>service</span>，<span
lang=EN-US>key</span>就直接是<span lang=EN-US>”ctl.”,value</span>是<span lang=EN-US>service
name.</span></span></p>

<p class=MsoNormal><span style='font-family:宋体'>顺便说下，<span lang=EN-US>libcutils\properties.c</span>提供对外的接口主要就是<span
lang=EN-US>3</span>个，<span lang=EN-US>property_set</span>，<span lang=EN-US>property_get</span>，<span
lang=EN-US>property_list</span>，基本这个文件很简单，就算分析完了。</span></p>

<p class=MsoNormal><span style='font-family:宋体'>现在来看服务器端<span lang=EN-US>:</span></span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>Init</span><span
style='font-family:宋体'>进程<span lang=EN-US>main </span></span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>{</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>//</span><span
style='font-family:宋体'>创建共享内存，<span lang=EN-US>load property from PROP_PATH_RAMDISK_DEFAULT</span>（<span
lang=EN-US>&quot;/default.prop&quot;</span>）</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp; property_init&nbsp;&nbsp;&nbsp;&nbsp;
</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>//load property from
N</span><span style='font-family:宋体'>个文件，创建服务器端<span lang=EN-US>socket</span>，监听，<span
lang=EN-US>noblock socket</span></span></p>

<p class=MsoNormal style='text-indent:15.75pt'><span lang=EN-US
style='font-family:宋体'>&nbsp;property_set_fd = start_property_service();</span></p>

<p class=MsoNormal style='text-indent:15.75pt'><span lang=EN-US
style='font-family:宋体'>for(;;) </span></p>

<p class=MsoNormal style='text-indent:15.75pt'><span lang=EN-US
style='font-family:宋体'>{</span></p>

<p class=MsoNormal style='text-indent:57.75pt'><span lang=EN-US
style='font-family:宋体'>restart_processes();</span></p>

<p class=MsoNormal style='margin-left:21.0pt;text-indent:31.5pt'><span
lang=EN-US style='font-family:宋体'>&nbsp;poll(ufds, fd_count, timeout);&nbsp;
//poll fds</span></p>

<p class=MsoNormal style='text-indent:15.75pt'><span lang=EN-US
style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if
(ufds[1].revents == POLLIN)&nbsp; //property </span><span style='font-family:
宋体'>来数据了</span></p>

<p class=MsoNormal style='text-indent:15.75pt'><span lang=EN-US
style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
handle_property_set_fd(property_set_fd); //</span><span style='font-family:
宋体'>处理数据</span></p>

<p class=MsoNormal style='text-indent:15.75pt'><span lang=EN-US
style='font-family:宋体'>&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>}</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>void
property_init(void)</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>{</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
init_property_area();</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
load_properties_from_file(PROP_PATH_RAMDISK_DEFAULT);</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>}</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>int
start_property_service(void)</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>{</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
int fd;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
load_properties_from_file(PROP_PATH_SYSTEM_BUILD);</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp; load_properties_from_file(PROP_PATH_SYSTEM_DEFAULT);</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
load_properties_from_file(PROP_PATH_LOCAL_OVERRIDE);</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
/* Read persistent properties after all default values have been loaded. */</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp; &nbsp;&nbsp;load_persistent_properties();</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
fd = create_socket(PROP_SERVICE_NAME, SOCK_STREAM, 0666, 0, 0);</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
fcntl(fd, F_SETFD, FD_CLOEXEC);</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
fcntl(fd, F_SETFL, O_NONBLOCK);</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
listen(fd, 8);</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
return fd;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>}</span></p>

<p class=MsoNormal><span style='font-family:宋体'>现在来看下<span lang=EN-US>handle_property_set_fd</span></span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>void
handle_property_set_fd(int fd)</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>{</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US
style='font-family:宋体'>switch(msg.cmd) {</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
case PROP_MSG_SETPROP:</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
msg.name[PROP_NAME_MAX-1] = 0;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
msg.value[PROP_VALUE_MAX-1] = 0;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if(memcmp(msg.name,&quot;ctl.&quot;,4) == 0) {</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if (check_control_perms(msg.value, cr.uid, cr.gid)) {//</span><span
style='font-family:宋体'>权限检查</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>处理<span lang=EN-US>service start or stop</span></span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
handle_control_message((char*) msg.name + 4, (char*) msg.value);</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
}</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
} else {</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if (check_perms(msg.name, cr.uid, cr.gid)) { //</span><span style='font-family:
宋体'>权限检查</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //</span><span
style='font-family:宋体'>真正去设置权限</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
property_set((char*) msg.name, (char*) msg.value); </span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
} </span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
}</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
break;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>}</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;</span></p>

<p class=MsoNormal><b><span style='font-size:16.0pt;font-family:宋体'>从权限的角度来看<span
lang=EN-US>System Properties</span></span></b></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>property_get</span><span
style='font-family:宋体'>是不需要权限的，而且这个是各个进程自己拿到了共享内存去读的，但是对于<span lang=EN-US>service
</span>控制和 <span lang=EN-US>property_set</span>是需要检查权限的。</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>handle_property_set_fd</span><span
style='font-family:宋体'>里面有分别对控制命令，<span lang=EN-US>property_set</span>之前的权限检查。</span></p>

<p class=MsoNormal><span style='font-family:宋体'>先看控制命令的权限<span lang=EN-US>:</span></span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>static int
check_control_perms(const char *name, int uid, int gid) {</span></p>

<p class=MsoNormal style='text-indent:20.25pt'><span lang=EN-US
style='font-family:宋体'>int i;</span></p>

<p class=MsoNormal style='text-indent:20.25pt'><span lang=EN-US
style='font-family:宋体'>//</span><span style='font-family:宋体'>如果是<span
lang=EN-US>AID_SYSTEM| AID_ROOT</span>可以为所欲为了</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
if (uid == AID_SYSTEM || uid == AID_ROOT)</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return 1;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp; //</span><span
lang=EN-US> </span><span lang=EN-US style='font-family:宋体'>control_perms</span><span
style='font-family:宋体'>里面只有一个<span lang=EN-US>{
&quot;dumpstate&quot;,AID_SHELL, AID_LOG }</span>，也就是下面的<span lang=EN-US>code</span>，只有<span
lang=EN-US>name== dumpstate</span>，<span lang=EN-US>uid</span>，<span
lang=EN-US>gid</span>都匹配上了才可能执行，也就说下面的代码目前只能至多去控制<span lang=EN-US>dumpstate
service</span></span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
for (i = 0; control_perms[i].service; i++) {</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if (strcmp(control_perms[i].service, name) == 0) {</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if ((uid &amp;&amp; control_perms[i].uid == uid) ||</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(gid &amp;&amp; control_perms[i].gid == gid)) {</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return 1;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;}</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
}</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
return 0;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>}</span></p>

<p class=MsoNormal><span style='font-family:宋体'>再来看<span lang=EN-US>property_set</span>的权限检查<span
lang=EN-US>:</span></span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>static int
check_perms(const char *name, unsigned int uid, int gid)</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>{</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
int i;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
if (uid == 0)&nbsp;&nbsp; //</span><span lang=EN-US style='font-family:宋体'> AID_ROOT
==0</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return 1;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
if(!strncmp(name, &quot;ro.&quot;, 3))&nbsp;&nbsp; //ro</span><span
style='font-family:宋体'>开头的<span lang=EN-US>property</span>表示只读</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
name +=3;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>//</span><span
style='font-family:宋体'>下面的代码只是检查<span lang=EN-US>property</span>的前缀，也就是说<span
lang=EN-US>property_perms</span>里面定义的前缀，只有有这样的前缀的<span lang=EN-US>property</span>才可能被修改</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
for (i = 0; property_perms[i].prefix; i++) {</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
int tmp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if (strncmp(property_perms[i].prefix, name,</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
strlen(property_perms[i].prefix)) == 0) {</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if ((uid &amp;&amp; property_perms[i].uid == uid) ||</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(gid &amp;&amp; property_perms[i].gid == gid)) {</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return 1;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
}</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
}</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;&nbsp;&nbsp;
return 0;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>}</span></p>

<p class=MsoNormal><b><span style='font-size:16.0pt;font-family:宋体'>从<span
lang=EN-US>API</span>的角度来看<span lang=EN-US>System Properties</span></span></b></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>Android\System\core\include\cutils\properties.h</span><span
style='font-family:宋体'>提供了<span lang=EN-US>C</span>的接口，主要就是<span lang=EN-US>3</span>个接口<span
lang=EN-US>:</span></span></p>

<p class=MsoListParagraph style='margin-left:18.0pt;text-indent:-18.0pt'><span
lang=EN-US style='font-family:宋体'>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span lang=EN-US style='font-family:宋体'>property_get&nbsp; </span></p>

<p class=MsoListParagraph style='margin-left:18.0pt;text-indent:-18.0pt'><span
lang=EN-US style='font-family:宋体'>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span lang=EN-US style='font-family:宋体'>property_set</span></p>

<p class=MsoListParagraph style='margin-left:18.0pt;text-indent:-18.0pt'><span
lang=EN-US style='font-family:宋体'>3.<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span lang=EN-US style='font-family:宋体'>property_list</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>frameworks\base\core\java\android\os\</span><span
lang=EN-US> </span><span lang=EN-US style='font-family:宋体'>SystemProperties.java</span><span
style='font-family:宋体'>提供了<span lang=EN-US>java</span>的接口，主要也就是<span
lang=EN-US>set/get.</span></span></p>

<p class=MsoNormal><span lang=EN-US style='font-family:宋体'>Jni</span><span
style='font-family:宋体'>的代码在<span lang=EN-US>\frameworks\base\core\jni\</span></span><span
lang=EN-US> </span><span lang=EN-US style='font-family:宋体'>android_os_SystemProperties.cpp</span></p>

<p class=MsoNormal><span style='font-family:宋体'>在这个文件里面需要说明的就是函数<span
lang=EN-US>SystemProperties_get_boolean</span>，这个函数里面指定了<span lang=EN-US>java</span>通过怎么样的规则来认为一个<span
lang=EN-US>value</span>是<span lang=EN-US>true</span>或者<span lang=EN-US>false</span>，毕竟存储的都是字符串。</span></p>

<p class=MsoListParagraph style='margin-left:18.0pt;text-indent:0cm'><span
lang=EN-US style='font-family:宋体'>&nbsp;</span></p>

</div>

</body>

</html>
