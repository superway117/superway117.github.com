// Generated by CoffeeScript 1.4.0
(function() {
  var $, PlatePage, PlatePanel,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $ = Spine.$;

  PlatePanel = (function(_super) {

    __extends(PlatePanel, _super);

    PlatePanel.prototype.tmplId = "plateTmpl";

    PlatePanel.prototype.generalTableTmplId = "plateGeneralTableTmpl";

    PlatePanel.prototype.baseTableTmplId = "plateBaseTableTmpl";

    PlatePanel.prototype.stockLabel = null;

    PlatePanel.prototype.timerStart = false;

    PlatePanel.prototype.events = {
      "shown a[data-toggle='tab']": "deSwitchTab",
      "click div.tab-content tbody td:nth-child(2)": "deGotoInfoPage",
      "change #generalTab thead input[type=checkbox]": "deCheckAllGeneral",
      "change #baseTab thead input[type=checkbox]": "deCheckAllBase",
      "click #deleteBtn": "deDelete",
      "click #compareBtn": "deCompare"
    };

    PlatePanel.prototype.elements = {
      'ui.nav-tabs': 'tabs',
      '#tagLabel': 'tagLabel',
      '#generalTab tbody': 'generalTable',
      '#baseTab tbody': 'baseTable',
      '#generalTab thead tr input[type=checkbox]': 'generalAllCheckboxs',
      '#generalTab tbody tr input[type=checkbox]': 'generalCheckboxs',
      '#baseTab tbody thead input[type=checkbox]': 'baseAllCheckboxs',
      '#baseTab tbody tr input[type=checkbox]': 'baseCheckboxs',
      '#deleteBtn': 'deleteBtn',
      '#compareBtn': 'compareBtn'
    };

    PlatePanel.prototype.tabList = {
      "generalTab": "generalFetch",
      "baseTab": "baseFetch"
    };

    PlatePanel.prototype.getActiveTab = function(e) {
      return this.$("li.active", this.tabs).attr("data-value");
    };

    PlatePanel.prototype.setLabel = function(stockLabel) {
      this.stockLabel = stockLabel;
      return this.tagLabel.text(stockLabel);
    };

    function PlatePanel() {
      this.deGotoInfoPage = __bind(this.deGotoInfoPage, this);
      this.fetchData = __bind(this.fetchData, this);
      this.fetchQuotesFinished = __bind(this.fetchQuotesFinished, this);
      this.fetchLastFinished = __bind(this.fetchLastFinished, this);      PlatePanel.__super__.constructor.apply(this, arguments);
      this["ystock"] = new Stock.YahooStock;
      this.ystock.bind('fetchLastFinished', this.fetchLastFinished);
      this.ystock.bind('fetchQuotesFinished', this.fetchQuotesFinished);
    }

    PlatePanel.prototype.startRefreshTimer = function() {
      if (this.isActive() && this.getActiveTab() === "generalTab") {
        this.delay(this.startRefreshTimer, 60000);
        return this.refresh();
      }
    };

    PlatePanel.prototype.activate = function() {
      PlatePanel.__super__.activate.apply(this, arguments);
      return this.startRefreshTimer();
    };

    PlatePanel.prototype.resetCheckbox = function() {
      this.generalAllCheckboxs.attr("checked", false);
      return this.baseAllCheckboxs.attr("checked", false);
    };

    PlatePanel.prototype.primitiveRefresh = function(options) {
      if (options != null ? options.resetLabel : void 0) {
        this.setLabel(Stock.TagList.first().name);
      }
      if (options != null ? options.resetHeader : void 0) {
        this.page.updateHeaderMenu();
      }
      this.resetCheckbox();
      return this.refresh();
    };

    PlatePanel.prototype.deSwitchTab = function(e) {
      return this.refresh();
    };

    PlatePanel.prototype.fetchLastFinished = function(result) {
      var data;
      if (result.status === "succ") {
        data = result.list;
        return this.generalRender(data);
      }
    };

    PlatePanel.prototype.fetchQuotesFinished = function(result) {
      var data;
      if (result.status === "succ") {
        data = result.list;
        return this.baseRender(data);
      }
    };

    PlatePanel.prototype.generalFetch = function(fetchlist) {
      return this.ystock.fetchLast(fetchlist);
    };

    PlatePanel.prototype.baseFetch = function(fetchlist) {
      return this.ystock.fetchQuotes(fetchlist);
    };

    PlatePanel.prototype.generalRender = function(data) {
      var color;
      this.generalTable.html($("#" + this.generalTableTmplId).tmpl(data));
      if (data) {
        if (data.price < data.preclose) {
          color = "#468847";
        } else {
          color = "#FF0000";
        }
      }
      if (color) {
        this.$("#generalTab .price").css("color", color);
      }
      return this.refreshElements();
    };

    PlatePanel.prototype.baseRender = function(data) {
      this.baseTable.html($("#" + this.baseTableTmplId).tmpl(data));
      return this.refreshElements();
    };

    PlatePanel.prototype.fetchData = function() {
      var activeTab, fetchlist, func, list, record,
        _this = this;
      list = Stock.StockList.select(function(record) {
        return record.tag === _this.stockLabel;
      });
      if (list.length === 0) {
        this.generalTable.html("");
        this.baseTable.html("");
        this.deleteBtn.text("删除Label");
        if (this.stockLabel === Stock.TagList["default"].name) {
          this.deleteBtn.attr("disabled", "disabled");
        } else {
          this.deleteBtn.removeAttr("disabled");
        }
        this.compareBtn.attr("disabled", "disabled");
        return this.refreshElements();
      } else {
        this.deleteBtn.removeAttr("disabled");
        this.compareBtn.removeAttr("disabled");
        this.deleteBtn.text("删除");
        fetchlist = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = list.length; _i < _len; _i++) {
            record = list[_i];
            _results.push(record.stock);
          }
          return _results;
        })();
        activeTab = this.getActiveTab();
        func = this.tabList[activeTab];
        if (this[func]) {
          return this[func](fetchlist);
        }
      }
    };

    PlatePanel.prototype.deGotoInfoPage = function(e) {
      var node, stockID;
      node = $(e.target);
      if (node.is("a")) {
        node = node.parent();
      }
      stockID = node.attr("data-value");
      this.page.triggerPageEvent("getinfo", stockID);
      return false;
    };

    PlatePanel.prototype.deCheckAllGeneral = function(e) {
      var node;
      node = $(e.target);
      this.generalCheckboxs.attr("checked", node.is(':checked'));
      return false;
    };

    PlatePanel.prototype.deCheckAllBase = function(e) {
      var node;
      node = $(e.target);
      this.baseCheckboxs.attr("checked", node.is(':checked'));
      return false;
    };

    PlatePanel.prototype.deDelete = function(e) {
      var checkbox, list, tag,
        _this = this;
      if (this.getActiveTab() === "generalTab") {
        checkbox = this.generalCheckboxs;
      } else {
        checkbox = this.baseCheckboxs;
      }
      list = [];
      checkbox.each(function(index, target) {
        var me, records, value;
        me = $(target);
        if (me.is(':checked')) {
          value = me.parent().next().attr("data-value");
          records = Stock.StockList.select(function(item) {
            return item["stock"] === value && item["tag"] === _this.stockLabel;
          });
          return list.push(records[0]);
        }
      });
      if (list.length > 0) {
        Stock.Util.openComfirmModal(this.page, {
          header: "Warning",
          body: "确定删除?"
        }, function() {
          var record, _i, _len;
          for (_i = 0, _len = list.length; _i < _len; _i++) {
            record = list[_i];
            record.destroy();
          }
          return _this.primitiveRefresh();
        });
      } else {
        list = Stock.StockList.select(function(record) {
          return record.tag === _this.stockLabel;
        });
        if (list.length === 0 && this.stockLabel !== Stock.TagList["default"].name) {
          tag = Stock.TagList.findByAttribute("name", this.stockLabel);
          if (tag) {
            tag.destroy();
          }
          this.primitiveRefresh({
            "resetLabel": true,
            "resetHeader": true
          });
        }
      }
      return false;
    };

    PlatePanel.prototype.deCompare = function(e) {
      var checkbox, list,
        _this = this;
      if (this.getActiveTab() === "generalTab") {
        checkbox = this.generalCheckboxs;
      } else {
        checkbox = this.baseCheckboxs;
      }
      list = [];
      checkbox.each(function(index, target) {
        var me, value;
        me = $(target);
        if (me.is(':checked')) {
          value = me.parent().next().attr("data-value");
          return list.push(value);
        }
      });
      if (list.length > 1) {
        this.page.triggerPageEvent("compare", list);
        this.resetCheckbox();
      }
      return false;
    };

    return PlatePanel;

  })(Stock.MixedPanel);

  PlatePage = (function(_super) {

    __extends(PlatePage, _super);

    PlatePage.prototype["default"] = "plate";

    PlatePage.prototype.footerMenuItem = {
      name: "plate",
      text: "板块"
    };

    PlatePage.prototype.controllers = {
      plate: PlatePanel
    };

    function PlatePage() {
      PlatePage.__super__.constructor.apply(this, arguments);
      Stock.TagList.fetch();
      Stock.StockList.fetch();
      if (Stock.TagList.count() === 0) {
        Stock.TagList.create(Stock.TagList["default"]);
      }
      this.plate.setLabel(Stock.TagList.first().name);
    }

    PlatePage.prototype.activate = function() {
      PlatePage.__super__.activate.apply(this, arguments);
      return this.updateHeaderMenu();
    };

    PlatePage.prototype.updateHeaderMenu = function() {
      var data, tag, _i, _len, _ref,
        _this = this;
      this.clearHeaderMenu();
      _ref = Stock.TagList.all();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tag = _ref[_i];
        tag = tag.attributes();
        data = {
          name: tag.name,
          text: tag.name
        };
        this.appendHeaderMenu(data);
      }
      return $("a", this.headerDropMenu).click(function(e) {
        var node;
        node = $(e.target);
        return _this.setLabel(node.attr("name"));
      });
    };

    PlatePage.prototype.setLabel = function(stockLabel) {
      this.plate.setLabel(stockLabel);
      return this.plate.refresh();
    };

    PlatePage.prototype.deQuickBarClick = function(e) {
      var node, stock;
      node = $(e.target);
      stock = node.attr("name");
      if (!Stock.Util.isValidStockID(stock)) {
        return false;
      }
      if (stock) {
        this.triggerPageEvent("getinfo", stock);
      }
      return false;
    };

    PlatePage.prototype.deFetchStock = function(e) {
      var stock;
      stock = this.searchText.val().slice(0, 6);
      if (!Stock.Util.isValidStockID(stock)) {
        return false;
      }
      this.triggerPageEvent("getinfo", stock);
      return false;
    };

    PlatePage.prototype.deGoHome = function(e) {
      this.triggerPageEvent("getinfo", "000001.SS");
      return false;
    };

    return PlatePage;

  })(Stock.StockBasePage);

  window.Stock["PlatePage"] = PlatePage;

}).call(this);
