// Generated by CoffeeScript 1.4.0
(function() {
  var $, StockTech, TechSetting,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $ = Spine.$;

  TechSetting = (function(_super) {

    __extends(TechSetting, _super);

    function TechSetting() {
      return TechSetting.__super__.constructor.apply(this, arguments);
    }

    TechSetting.configure("TechSetting", "range", "type", "scale", "size", "ema", "indicator", "overlay");

    TechSetting.extend(Spine.Model.Local);

    TechSetting["default"] = {
      range: "1m",
      type: "line",
      scale: "log",
      size: "middle",
      moving: "",
      ema: "",
      indicator: "",
      overlay: ""
    };

    return TechSetting;

  })(Spine.Model);

  StockTech = (function(_super) {

    __extends(StockTech, _super);

    StockTech.prototype.tmplId = "stockTechTmpl";

    StockTech.prototype.headerMenuItem = {
      name: "tech",
      text: "技术指标"
    };

    StockTech.prototype.events = {
      'click button[type=button]': 'deTapButton',
      'change form.form-inline select': 'deSelectIndicator',
      'submit form.form-inline': 'deCompare',
      'focus form.form-inline input[type=text]': 'deClearCompare'
    };

    StockTech.prototype.elements = {
      'form.form-inline input[type=text]': 'compareText'
    };

    function StockTech() {
      this.meSettingRefresh = __bind(this.meSettingRefresh, this);
      this.render = __bind(this.render, this);
      this.compareTypeAhead = __bind(this.compareTypeAhead, this);      StockTech.__super__.constructor.apply(this, arguments);
      TechSetting.bind("refresh", this.meSettingRefresh);
      TechSetting.bind("change", this.render);
      TechSetting.fetch();
      this.compareText.typeahead({
        source: this.compareTypeAhead,
        matcher: function() {
          return true;
        }
      });
    }

    StockTech.prototype.compareTypeAhead = function(val, func) {
      var item, list, _i, _len, _results;
      list = Stock.StockDict.query(val);
      _results = [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        item = list[_i];
        _results.push(item.join(","));
      }
      return _results;
    };

    StockTech.prototype.deClearCompare = function(e) {
      return $(e.target).val("");
    };

    StockTech.prototype.render = function(compares) {
      var list, option, url;
      option = TechSetting.first().attributes() || TechSetting["default"];
      if (compares) {
        if (Stock.Util.isString(compares)) {
          option["compare"] = compares;
        } else {
          list = compares[0];
          option["compare"] = list;
        }
      }
      url = Stock.YahooStock.fetchTechChart(this.page.stockID, option);
      return this.$("#techChart").attr("src", url);
    };

    StockTech.prototype.meSettingRefresh = function() {
      var setting;
      setting = TechSetting.first();
      if (!setting) {
        return TechSetting.create(TechSetting["default"]);
      }
    };

    StockTech.prototype.activate = function() {
      StockTech.__super__.activate.apply(this, arguments);
      this.$("#otherTech").collapse();
      return this.refreshButtonState();
    };

    StockTech.prototype.refreshButtonState = function() {
      var command, option, value, _results;
      option = TechSetting.first().attributes() || TechSetting["default"];
      _results = [];
      for (command in option) {
        value = option[command];
        if (value !== "") {
          _results.push(this.$("button[data-command=" + command + "][data-value=" + value + "]").button('toggle'));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    StockTech.prototype.deTapButton = function(e) {
      var command, node, setting, value;
      setting = TechSetting.first();
      node = $(e.target);
      command = node.attr("data-command");
      value = node.attr("data-value");
      if (setting[command] === value) {
        setting[command] = "";
      } else {
        setting[command] = value;
      }
      return setting.save();
    };

    StockTech.prototype.deSelectIndicator = function(e) {
      var setting, value;
      setting = TechSetting.first();
      value = $(e.target).val();
      if (value !== "") {
        setting["indicator"] = value;
        return setting.save();
      }
    };

    StockTech.prototype.deCompare = function(e) {
      var value;
      value = this.compareText.val().slice(0, 6);
      if (!Stock.Util.isValidStockID(value)) {
        return false;
      }
      return this.trigger("refresh", value);
    };

    return StockTech;

  })(Stock.StaticPanel);

  window.Stock["StockTech"] = StockTech;

}).call(this);
