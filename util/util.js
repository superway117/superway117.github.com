// Generated by CoffeeScript 1.4.0
(function() {
  var $, Util;

  $ = Spine.$;

  Util = (function() {

    function Util() {}

    Util.toString = Object.prototype.toString;

    Util.isString = function(obj) {
      return this.toString.call(obj) === '[object String]';
    };

    Util.isValidStockID = function(stockID) {
      if (isNaN(stockID)) {
        return false;
      }
      if (stockID.length !== 6) {
        return false;
      }
      return true;
    };

    Util.getNowDateString = function() {
      var now;
      now = new Date();
      return "" + (now.getMonth() + 1) + "-" + (now.getDate()) + "-" + (now.getFullYear());
    };

    Util.getDaysBeforeString = function(days) {
      var date, now;
      now = new Date();
      date = new Date(now.getTime() - days * 1000 * 60 * 60 * 24);
      return "" + (date.getMonth() + 1) + "-" + (date.getDate()) + "-" + (date.getFullYear());
    };

    Util.getDaysBeforeDate = function(days) {
      var now;
      now = new Date();
      return new Date(now.getTime() - days * 1000 * 60 * 60 * 24);
    };

    Util.openPromptInfo = function(page, data) {
      page.el.append($("#promptInfoModalTmpl").tmpl(data));
      page.$("#promptInfoModal").modal();
      return page.$("#promptInfoModal").modal('show');
    };

    Util.closePromptInfo = function(page) {
      page.$("#promptInfoModal").modal('hide');
      return page.$("#promptInfoModal").remove();
    };

    Util.openComfirmModal = function(page, data, callback1, callback2) {
      var _this = this;
      page.el.append($("#comfirmModalTmpl").tmpl(data));
      page.$("#comfirmModal").modal();
      page.$("#comfirmModal").modal('show');
      page.$("#comfirmModal button.btn-primary").click(function() {
        if (typeof callback1 === "function") {
          callback1();
        }
        _this.closeComfirmModal(page);
        return false;
      });
      return page.$("#comfirmModal button").click(function() {
        if (typeof callback2 === "function") {
          callback2();
        }
        _this.closeComfirmModal(page);
        return false;
      });
    };

    Util.closeComfirmModal = function(page) {
      page.$("#comfirmModal").modal('hide');
      return page.$("#comfirmModal").remove();
    };

    Util.openAlert = function(container, options) {
      var alert;
      container.append($("#alertTmpl").tmpl(options));
      alert = $(".alert", container);
      if (options.type) {
        alert.addClass(options.type);
      }
      alert.show();
      return setTimeout(function() {
        alert.remove();
        return false;
      }, 1000);
    };

    Util.openStockInputModal = function(page, callback1, callback2) {
      var modal, text,
        _this = this;
      page.el.append($("#stockInputModalTmpl").tmpl());
      modal = page.$("#stockInputModal");
      text = page.$("#stockInputModal input[type=text]");
      text.typeahead({
        source: function(val, func) {
          var item, list, _i, _len, _results;
          list = Stock.StockDict.query(val);
          _results = [];
          for (_i = 0, _len = list.length; _i < _len; _i++) {
            item = list[_i];
            _results.push(item.join(","));
          }
          return _results;
        },
        matcher: function() {
          return true;
        }
      });
      modal.modal();
      modal.modal('show');
      page.$("#stockInputModal button.btn-primary").click(function() {
        if (text.val()) {
          if (typeof callback1 === "function") {
            callback1(text.val());
          }
          _this.closeStockInputModal(page);
        }
        return false;
      });
      return page.$("#stockInputModal button").click(function() {
        if (typeof callback2 === "function") {
          callback2();
        }
        _this.closeStockInputModal(page);
        return false;
      });
    };

    Util.closeStockInputModal = function(page) {
      var modal;
      modal = page.$("#stockInputModal");
      modal.modal('hide');
      return modal.remove();
    };

    return Util;

  })();

  window.Stock["Util"] = Util;

}).call(this);
